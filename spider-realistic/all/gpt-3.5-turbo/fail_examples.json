[{"p_str": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName", "g_str": ["SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName", "g_str": ["SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T1.FullName", "g_str": ["select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT CountryName FROM countries WHERE Continent = 'Europe' AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3)", "g_str": ["SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryName FROM countries WHERE Continent = 'Europe' AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3)", "g_str": ["SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Make FROM car_names GROUP BY Make ORDER BY COUNT(DISTINCT Model) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)", "g_str": ["SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)", "g_str": ["SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "select count(*) from (select country, count(*) from car_makers group by country having makercount > 2) as nationswithmorethan2carmakers", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Model, MAX(Horsepower) FROM cars_data WHERE Cylinders = 4 GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T2.ID, T2.Name, T2.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1", "g_str": ["SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT Name, Age FROM visitor WHERE ID = (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY Num_of_Ticket DESC LIMIT 1)", "g_str": ["SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "museum_visit"], "hardness": "hard"}, {"p_str": "SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10", "g_str": ["SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10", "g_str": ["SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS player_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS player_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.id, T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING COUNT(*) > 10", "g_str": ["SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "battle_death"], "hardness": "hard"}, {"p_str": "SELECT T1.caused_by_ship_id, T2.id, T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T1.caused_by_ship_id ORDER BY SUM(T1.injured) DESC LIMIT 1", "g_str": ["SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1) OR address_id = (SELECT permanent_address_id FROM Students GROUP BY permanent_address_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1) OR address_id = (SELECT permanent_address_id FROM Students GROUP BY permanent_address_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)", "g_str": ["SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT District, COUNT(*) FROM city GROUP BY District HAVING Population > (SELECT AVG(Population) FROM city)", "g_str": ["SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "world_1"], "hardness": "extra"}, {"p_str": "SELECT District, COUNT(*) FROM city GROUP BY District HAVING Population > (SELECT AVG(Population) FROM city)", "g_str": ["SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "world_1"], "hardness": "extra"}, {"p_str": "SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.CountryCode, cl.Percentage) IN      (SELECT CountryCode, MAX(Percentage)       FROM countrylanguage       GROUP BY CountryCode)", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.CountryCode, T2.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' EXCEPT SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType != 'cat'", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' EXCEPT SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType != 'cat'", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  \"dog\" EXCEPT SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  \"cat\"", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  \"dog\" EXCEPT SELECT t1.Fname FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  \"cat\"", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.ModelId = T4.MakeId WHERE T4.Model LIKE '%fiat%'", "g_str": ["SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryId HAVING COUNT(Id) > 3 UNION SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make = 'fiat'", "g_str": ["select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_date LIKE '2013%' INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_date LIKE '2016%'", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Content = \"cartoon\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\"", "g_str": ["SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T1.Content  =  \"cartoon\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  \"Todd Casey\"", "g_str": ["SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  \"Ben Jones\"", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel EXCEPT SELECT T2.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  \"Ben Jones\"", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = \"English\"", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = \"English\"", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  !=  'Republic' AND T2.Language  =  'English'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  !=  'Republic' AND T2.Language  =  'English'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT D.name FROM Dogs AS D JOIN Treatments AS T ON D.dog_id  =  T.dog_id JOIN Owners AS O ON D.owner_id  =  O.owner_id GROUP BY D.dog_id HAVING SUM(T.cost_of_treatment)  >  1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE property_type_description = 'house' AND room_count > 1 UNION SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE property_type_description = 'apartment' AND room_count > 1", "g_str": ["SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "real_estate_properties"], "hardness": "hard"}, {"p_str": "SELECT song_name FROM singer_in_concert  JOIN singer ON singer_in_concert.singer_id = singer.singer_id  WHERE age > (SELECT avg(age) FROM singer)", "g_str": ["SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT song_name FROM singer_in_concert AS sic JOIN singer AS s ON sic.singer_id = s.singer_id WHERE s.age > (SELECT avg(age) FROM singer)", "g_str": ["SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT T3.name, T3.capacity FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN stadium AS T3 ON T1.stadium_id = T3.stadium_id WHERE T1.year >= 2014 GROUP BY T1.stadium_id ORDER BY COUNT(T1.concert_id) DESC LIMIT 1", "g_str": ["SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "concert_singer"], "hardness": "extra"}, {"p_str": "SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)))", "g_str": ["SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)))", "g_str": ["SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "car_1"], "hardness": "extra"}, {"p_str": "SELECT car_makers.Maker, cars_data.Year  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  ORDER BY cars_data.Year ASC  LIMIT 1", "g_str": ["SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "car_1"], "hardness": "extra"}, {"p_str": "SELECT car_makers.Maker, cars_data.Year  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  ORDER BY cars_data.Year ASC  LIMIT 1", "g_str": ["SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "car_1"], "hardness": "extra"}, {"p_str": "SELECT accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'AMC Hornet Sportabout (SW)')", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model WHERE t1.country = \"United States\"", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model WHERE t1.country = \"United States\"", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT ModelId FROM model_list WHERE Maker = 'volvo')", "g_str": ["SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT ModelId FROM model_list WHERE Maker = 'volvo')", "g_str": ["SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = \"American Motor Company\")", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = \"American Motor Company\")", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT Model FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = \"General Motors\" OR cars_data.Weight > 3500", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT Model FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = \"General Motors\" OR cars_data.Weight > 3500", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Cylinders FROM cars_data WHERE Id IN (SELECT ModelId FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')) AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT ModelId FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Cylinders FROM cars_data WHERE Id IN (SELECT ModelId FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')) AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT ModelId FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model WHERE T1.Weight  <  3500 AND T3.Maker  !=  \"Ford\"", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T4.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T1.Weight  <  3500 AND T4.Maker  !=  \"Ford\"", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT * FROM airlines WHERE Airline = 'UAL'", "g_str": ["SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT * FROM airlines WHERE Airline = 'UAL'", "g_str": ["SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT Airline FROM airlines WHERE Abbreviation = \"AKO\"", "g_str": ["SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT Airline FROM airlines WHERE Abbreviation = \"AKO\"", "g_str": ["SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE hand = 'L' ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE hand = 'L' ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L'", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT series_name FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = \"The Rise of the Blue Beetle\")", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT series_name FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = \"The Rise of the Blue Beetle\")", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Air_Date FROM TV_series WHERE Title = \"A Love of a Lifetime\"", "g_str": ["SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT Air_Date FROM TV_series WHERE Title = \"A Love of a Lifetime\"", "g_str": ["SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT weekly_rank FROM TV_series WHERE series_name = \"A Love of a Lifetime\"", "g_str": ["SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT weekly_rank FROM TV_series WHERE series_name = \"A Love of a Lifetime\"", "g_str": ["SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT series_name FROM TV_Channel WHERE Title = \"A Love of a Lifetime\"", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT series_name FROM TV_Channel WHERE Title = \"A Love of a Lifetime\"", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT state, COUNT(vote_id) AS number_of_votes FROM VOTES WHERE state = 'NY' OR state = 'CA' GROUP BY state", "g_str": ["SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "voter_1"], "hardness": "medium"}, {"p_str": "SELECT region FROM country WHERE name = \"Kabul\"", "g_str": ["SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT region FROM country WHERE name = \"Kabul\"", "g_str": ["SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT sum(country.Population) AS total_population, max(country.GNP) AS largest_GNP FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Asia'", "g_str": ["SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS largest_GNP FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Asia'", "g_str": ["SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Population FROM country WHERE Name = \"Gelderland\"", "g_str": ["SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT Population FROM country WHERE Name = \"Gelderland\"", "g_str": ["SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT AVG(T1.GNP) ,  SUM(T1.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Region  =  \"US Territory\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT AVG(T1.GNP) ,  SUM(T1.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Region  =  \"US Territory\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE Language = 'English'  ORDER BY Population DESC  LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE Language = 'English'  ORDER BY Population DESC  LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT SUM(c.population) FROM country AS c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language != 'English')", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT SUM(c.population) FROM country AS c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language != 'English')", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\") AND IsOfficial = \"T\"", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\") AND IsOfficial = \"T\"", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM country WHERE Population > (SELECT max(Population) FROM country WHERE Continent = \"Europe\")", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE Population > (SELECT max(Population) FROM country WHERE Continent = \"Europe\")", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT c1.Name FROM country AS c1 WHERE c1.Continent  =  'Africa' AND c1.Population  <  (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent  =  'Asia')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT continent FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Europe\" AND countrylanguage.Language != \"English\" AND countrylanguage.IsOfficial = \"F\"", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'", "g_str": ["SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT P.first_name, P.last_name  FROM Professionals AS P  JOIN Treatments AS T ON P.professional_id = T.professional_id  WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM Treatments))", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT Name FROM singer WHERE Sales > 300000", "g_str": ["SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "singer"], "hardness": "medium"}, {"p_str": "SELECT Name FROM singer WHERE Sales > 300000", "g_str": ["SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "singer"], "hardness": "medium"}, {"p_str": "SELECT Name, Country, Age FROM singer ORDER BY Age ASC", "g_str": ["SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT CountryName, CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country", "g_str": ["SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT CountryName, CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country", "g_str": ["SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.MPG = (SELECT MAX(MPG) FROM cars_data)", "g_str": ["select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visitor_ID IS NULL", "g_str": ["SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "museum_visit"], "hardness": "hard"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC", "g_str": ["SELECT first_name ,  last_name FROM players ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC", "g_str": ["SELECT first_name ,  last_name FROM players ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT p1.first_name AS winner_first_name, p1.last_name AS winner_last_name, p2.first_name AS loser_first_name, p2.last_name AS loser_last_name FROM matches AS m JOIN players AS p1 ON m.winner_id = p1.player_id JOIN players AS p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT p1.first_name AS winner_first_name, p1.last_name AS winner_last_name, p2.first_name AS loser_first_name, p2.last_name AS loser_last_name FROM matches AS m JOIN players AS p1 ON m.winner_id = p1.player_id JOIN players AS p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T2.first_name, T2.last_name, T3.ranking FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN rankings AS T3 ON T2.player_id = T3.player_id WHERE T1.winner_age IS NOT NULL ORDER BY T1.winner_age ASC LIMIT 3", "g_str": ["SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T2.first_name, T2.last_name, T3.ranking FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN rankings AS T3 ON T2.player_id = T3.player_id WHERE T1.winner_age IS NOT NULL ORDER BY T1.winner_age ASC LIMIT 3", "g_str": ["SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id ORDER BY T2.transcript_date ASC LIMIT 1", "g_str": ["SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, T1.middle_name, T1.last_name  FROM Students AS T1  JOIN Transcripts AS T2 ON T1.student_id = T2.student_id  WHERE T2.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)", "g_str": ["SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT people.Name, poker_player.Earnings FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC", "g_str": ["SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "poker_player"], "hardness": "easy"}, {"p_str": "SELECT COUNT(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' AND T2.IsOfficial = 'T'", "g_str": ["SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' AND T2.IsOfficial = 'T'", "g_str": ["SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM city GROUP BY CountryCode)", "g_str": ["SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM city GROUP BY CountryCode)", "g_str": ["SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM conductor ORDER BY Age DESC", "g_str": ["SELECT Name FROM conductor ORDER BY Age ASC", "orchestra"], "hardness": "easy"}, {"p_str": "SELECT Name FROM conductor ORDER BY Age DESC", "g_str": ["SELECT Name FROM conductor ORDER BY Age ASC", "orchestra"], "hardness": "easy"}, {"p_str": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded ASC", "g_str": ["SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "orchestra"], "hardness": "easy"}, {"p_str": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded ASC", "g_str": ["SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "orchestra"], "hardness": "easy"}, {"p_str": "SELECT treatment_type_description FROM Treatment_Types ORDER BY charge_amount ASC LIMIT 1", "g_str": ["SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT O.last_name FROM Dogs AS D JOIN Owners AS O ON D.owner_id = O.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT O.last_name FROM Dogs AS D JOIN Owners AS O ON D.owner_id = O.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT charge_amount FROM Charges JOIN Treatments ON Charges.charge_id = Treatments.treatment_id ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT charge_amount FROM Charges JOIN Treatments ON Charges.charge_id = Treatments.treatment_id ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}]