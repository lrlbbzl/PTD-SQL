[
    {
        "db_id": "concert_singer",
        "gold": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts are there in year 2014 or 2015?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the car produced in the earliest year and what year was it?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many car makers are there in france?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of makers of care in France?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average horsepower of the cars before 1980?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the cars of model volvo?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total bonus given in all evaluations?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store locations are there?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many templates have template type code CV?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM players",
        "question": "Find the total number of players.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM matches",
        "question": "Count the number of matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of players from the USA?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many matches were played in 2013 or 2016?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players in the order of birth date.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted by birth date?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the battles?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math course described?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the transcripts printed?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average transcript date?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different addresses that have students living there?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct nationalities are there?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different nationalities.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the countries that became independent after 1950?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have a republic as their form of government?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have governments that are republics?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil’s population and life expectancies.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and population of Angola?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people’s average life expectancy in Central Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total population and maximum GNP in Asia?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average life expectancy in African countries that are republics?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total population of Gelderland district?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many countries are in Asia?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of countries in Asia.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "select name from city where population between 160000 and 900000",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the high school student Kyle have?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "real_estate_properties",
        "gold": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "foreign_keys": "Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n",
        "tables": "Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n",
        "types": {
            "Ref_Feature_Types.feature_type_code": "text",
            "Ref_Feature_Types.feature_type_name": "text",
            "Ref_Property_Types.property_type_code": "text",
            "Ref_Property_Types.property_type_description": "text",
            "Other_Available_Features.feature_id": "number",
            "Other_Available_Features.feature_type_code": "text",
            "Other_Available_Features.feature_name": "text",
            "Other_Available_Features.feature_description": "text",
            "Properties.property_id": "number",
            "Properties.property_type_code": "text",
            "Properties.date_on_market": "time",
            "Properties.date_sold": "time",
            "Properties.property_name": "text",
            "Properties.property_address": "text",
            "Properties.room_count": "number",
            "Properties.vendor_requested_price": "number",
            "Properties.buyer_offered_price": "number",
            "Properties.agreed_selling_price": "number",
            "Properties.apt_feature_1": "text",
            "Properties.apt_feature_2": "text",
            "Properties.apt_feature_3": "text",
            "Properties.fld_feature_1": "text",
            "Properties.fld_feature_2": "text",
            "Properties.fld_feature_3": "text",
            "Properties.hse_feature_1": "text",
            "Properties.hse_feature_2": "text",
            "Properties.hse_feature_3": "text",
            "Properties.oth_feature_1": "text",
            "Properties.oth_feature_2": "text",
            "Properties.oth_feature_3": "text",
            "Properties.shp_feature_1": "text",
            "Properties.shp_feature_2": "text",
            "Properties.shp_feature_3": "text",
            "Properties.other_property_details": "text",
            "Other_Property_Features.property_id": "number",
            "Other_Property_Features.feature_id": "number",
            "Other_Property_Features.property_feature_description": "text"
        }
    },
    {
        "db_id": "real_estate_properties",
        "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "foreign_keys": "Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n",
        "tables": "Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n",
        "types": {
            "Ref_Feature_Types.feature_type_code": "text",
            "Ref_Feature_Types.feature_type_name": "text",
            "Ref_Property_Types.property_type_code": "text",
            "Ref_Property_Types.property_type_description": "text",
            "Other_Available_Features.feature_id": "number",
            "Other_Available_Features.feature_type_code": "text",
            "Other_Available_Features.feature_name": "text",
            "Other_Available_Features.feature_description": "text",
            "Properties.property_id": "number",
            "Properties.property_type_code": "text",
            "Properties.date_on_market": "time",
            "Properties.date_sold": "time",
            "Properties.property_name": "text",
            "Properties.property_address": "text",
            "Properties.room_count": "number",
            "Properties.vendor_requested_price": "number",
            "Properties.buyer_offered_price": "number",
            "Properties.agreed_selling_price": "number",
            "Properties.apt_feature_1": "text",
            "Properties.apt_feature_2": "text",
            "Properties.apt_feature_3": "text",
            "Properties.fld_feature_1": "text",
            "Properties.fld_feature_2": "text",
            "Properties.fld_feature_3": "text",
            "Properties.hse_feature_1": "text",
            "Properties.hse_feature_2": "text",
            "Properties.hse_feature_3": "text",
            "Properties.oth_feature_1": "text",
            "Properties.oth_feature_2": "text",
            "Properties.oth_feature_3": "text",
            "Properties.shp_feature_1": "text",
            "Properties.shp_feature_2": "text",
            "Properties.shp_feature_3": "text",
            "Properties.other_property_details": "text",
            "Other_Property_Features.property_id": "number",
            "Other_Property_Features.feature_id": "number",
            "Other_Property_Features.property_feature_description": "text"
        }
    }
]