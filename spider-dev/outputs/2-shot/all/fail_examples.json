[{"p_str": "SELECT Stadium_ID, COUNT(concert_ID) FROM concert GROUP BY Stadium_ID ORDER BY COUNT(concert_ID)", "g_str": ["SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT Country, COUNT(*) FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T1.FullName", "g_str": ["select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Model, COUNT(*) FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(DISTINCT Maker) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Maker, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)", "g_str": ["SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.CountryId, COUNT(*) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(*) > 2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Model FROM cars_data WHERE Cylinders = 4 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 4)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) ASC LIMIT 1", "g_str": ["SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(FlightNo) ASC LIMIT 1)", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT T1.Abbreviation, T2.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.Airline = T2.Airline GROUP BY T2.Airline ORDER BY COUNT(*) ASC LIMIT 1", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT hiring.Shop_ID, shop.Name, COUNT(hiring.Employee_ID) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID, shop.Name", "g_str": ["SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "employee_hire_evaluation"], "hardness": "medium"}, {"p_str": "SELECT hiring.Shop_ID, shop.Name, COUNT(hiring.Employee_ID) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID, shop.Name", "g_str": ["SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "employee_hire_evaluation"], "hardness": "medium"}, {"p_str": "SELECT Document_ID, Document_Name FROM Documents GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "extra"}, {"p_str": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "course_teach"], "hardness": "hard"}, {"p_str": "SELECT ID, Name, Level_of_membership FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY SUM(Total_spent) DESC LIMIT 1)", "g_str": ["SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT tourney_name, COUNT(match_num) FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10", "g_str": ["SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT T2.first_name, T2.country_code FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT first_name, last_name, ranking_points FROM players WHERE player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT m.winner_name, r.ranking_points  FROM matches m  JOIN players p ON m.winner_id = p.player_id  JOIN rankings r ON p.player_id = r.player_id  GROUP BY m.winner_id  ORDER BY COUNT(*) DESC  LIMIT 1", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT loser.first_name AS loser_first_name, loser.last_name AS loser_last_name, winner.first_name AS winner_first_name, winner.last_name AS winner_last_name FROM matches JOIN players AS loser ON matches.loser_id = loser.player_id JOIN players AS winner ON matches.winner_id = winner.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id", "g_str": ["SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date", "g_str": ["SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE winner_id = players.player_id ORDER BY (SELECT ranking_points FROM rankings WHERE player_id = players.player_id ORDER BY ranking_points DESC LIMIT 1) DESC LIMIT 1)", "g_str": ["SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)", "g_str": ["SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "battle_death"], "hardness": "hard"}, {"p_str": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY SUM(T2.injured) DESC LIMIT 1", "g_str": ["SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT Departments.department_name, COUNT(Degree_Programs.degree_program_id) AS num_degrees, Departments.department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Degree_Programs.department_id ORDER BY num_degrees DESC LIMIT 1", "g_str": ["SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(*) DESC", "g_str": ["SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT first_name, middle_name, last_name, student_id FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2)", "g_str": ["SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.degree_program_id, T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY num_enrollments DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT Students.current_address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.student_enrolment_id, COUNT(T1.course_id) AS max_count FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id ORDER BY max_count DESC LIMIT 1", "g_str": ["SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2", "g_str": ["SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.People_ID ORDER BY COUNT(T2.Final_Table_Made) ASC", "g_str": ["SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "poker_player"], "hardness": "medium"}, {"p_str": "SELECT area_code FROM AREA_CODE_STATE WHERE state = (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "voter_1"], "hardness": "extra"}, {"p_str": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1", "g_str": ["SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1", "g_str": ["SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm", "g_str": ["SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Language FROM countrylanguage WHERE (CountryCode, Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode HAVING Percentage = MAX(Percentage)", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC", "g_str": ["SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1", "g_str": ["SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "orchestra"], "hardness": "hard"}, {"p_str": "SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name", "g_str": ["SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name", "g_str": ["SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "select highschooler.name, count(*) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name", "g_str": ["SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "select highschooler.name, count(*) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name", "g_str": ["SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT professional_id, role_code, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2", "g_str": ["SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT owner_id, last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT owner_id, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE dog_id = (SELECT dog_id FROM Treatments GROUP BY dog_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1))", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.owner_id, T2.zip_code FROM Treatments AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(T1.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)", "g_str": ["SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)", "g_str": ["SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT breed_code, size_code FROM Breeds, Sizes", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Major, Age FROM Student EXCEPT SELECT t1.Major, t1.Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t3.PetType = \"cat\"", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT Major, Age FROM Student EXCEPT SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT t1.Fname, t1.Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t3.PetType = \"dog\" EXCEPT SELECT t1.Fname, t1.Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t3.PetType = \"cat\"", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"dog\" EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"cat\"", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = \"General Motors\") UNION SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500)", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Make = 'fiat'", "g_str": ["SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Make = 'fiat'", "g_str": ["select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' EXCEPT SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG'", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT airportname FROM airports EXCEPT SELECT t1.airportname FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.sourceairport EXCEPT SELECT t1.airportname FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 WHERE T1.tourney_name = 'WTA Championships' INTERSECT SELECT T2.winner_id FROM matches AS T2 JOIN players AS T3 ON T2.winner_id = T3.player_id WHERE T3.hand = 'Left'", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT S1.semester_name FROM Semesters AS S1 JOIN Student_Enrolment AS SE1 ON S1.semester_id = SE1.semester_id JOIN Degree_Programs AS DP1 ON SE1.degree_program_id = DP1.degree_program_id WHERE DP1.degree_summary_name = \"Master\" INTERSECT SELECT S2.semester_name FROM Semesters AS S2 JOIN Student_Enrolment AS SE2 ON S2.semester_id = SE2.semester_id JOIN Degree_Programs AS DP2 ON SE2.degree_program_id = DP2.degree_program_id WHERE DP2.degree_summary_name = \"Bachelor\"", "g_str": ["SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  \"Todd Casey\"", "g_str": ["SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\"", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number JOIN AREA_CODE_STATE AS T3 ON T1.state = T3.state WHERE T2.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number JOIN AREA_CODE_STATE AS T3 ON T1.state = T3.state WHERE T2.contestant_name = 'Kelly Clauss'", "g_str": ["SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "voter_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\"", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\"", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') UNION SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')", "g_str": ["SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "world_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  <>  'English' INTERSECT SELECT Code FROM country WHERE GovernmentForm  <>  'Republic'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT ID FROM Highschooler EXCEPT SELECT t1.ID FROM Highschooler AS t1 JOIN Friend AS t2 ON t1.ID = t2.friend_id", "g_str": ["SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "network_1"], "hardness": "hard"}, {"p_str": "SELECT name FROM Highschooler EXCEPT SELECT t1.name FROM Highschooler AS t1 JOIN Friend AS t2 ON t1.ID  =  t2.friend_id", "g_str": ["SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT D.name FROM Dogs AS D JOIN Owners AS O ON D.owner_id = O.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE T.cost_of_treatment <= 1000 GROUP BY D.dog_id HAVING SUM(T.cost_of_treatment) <= 1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT first_name FROM Professionals EXCEPT SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "g_str": ["SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT property_name FROM Properties WHERE property_type_code = 'house' AND room_count > 1 UNION SELECT property_name FROM Properties WHERE property_type_code = 'apartment' AND room_count > 1", "g_str": ["SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "real_estate_properties"], "hardness": "hard"}, {"p_str": "SELECT Id, Maker FROM car_makers GROUP BY Maker HAVING COUNT(*) >= 2 INTERSECT SELECT Id, Maker FROM car_makers GROUP BY Maker HAVING COUNT(*) > 3", "g_str": ["select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(T2.Model) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T1.Id HAVING COUNT(T2.Make) > 3", "g_str": ["SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = \"English\"", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT singer.name, singer.song_release_year FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer.age = (SELECT min(age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT singer.song_name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer.age > (SELECT AVG(age) FROM singer)", "g_str": ["SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT T4.name, T4.capacity FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN stadium AS T4 ON T1.stadium_id = T4.stadium_id WHERE T1.year >= 2014 GROUP BY T1.stadium_id ORDER BY COUNT(T1.concert_id) DESC LIMIT 1", "g_str": ["SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "concert_singer"], "hardness": "extra"}, {"p_str": "SELECT singer.name FROM singer_in_concert JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014", "g_str": ["SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype IN ('cat', 'dog')", "g_str": ["SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "g_str": ["SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT pet_id FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'", "g_str": ["SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT model FROM car_names JOIN model_list ON car_names.MakeId = model_list.ModelId JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE weight < (SELECT avg(weight) FROM cars_data)", "g_str": ["SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "car_1"], "hardness": "extra"}, {"p_str": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)", "g_str": ["SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T3.Maker FROM cars_data AS T1 JOIN car_names AS T2 JOIN model_list AS T3 JOIN car_makers AS T4 ON T1.Id  =  T2.MakeId AND T2.Model  =  T3.Model AND T3.Maker  =  T4.Id WHERE T1.Year  =  1970", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = 1970", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)", "g_str": ["SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM car_makers WHERE country  =  \"France\"", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM car_makers WHERE Country = 'France'", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT car_names.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"USA\";", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(*) FROM car_makers WHERE Country = 'United States'", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Maker, MAX(T2.Horsepower) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Cylinders = 3 GROUP BY T1.Maker", "g_str": ["SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Maker, T2.Horsepower FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Cylinders = 3 ORDER BY T2.Horsepower DESC LIMIT 1", "g_str": ["SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company'", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000", "g_str": ["select distinct year from cars_data where weight between 3000 and 4000;", "car_1"], "hardness": "easy"}, {"p_str": "SELECT cylinders FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id = T2.model_id JOIN car_names AS T3 ON T2.maker = T3.make_id WHERE T3.make = \"Volvo\" AND T1.accelerate = (SELECT MIN(accelerate) FROM cars_data AS T4 JOIN model_list AS T5 ON T4.id = T5.model_id JOIN car_names AS T6 ON T5.maker = T6.make_id WHERE T6.make = \"Volvo\")", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data)", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Make  =  T3.Model WHERE T1.Weight  <  3500 AND T3.Maker  !=  'Ford Motor Company'", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN car_makers AS T4 ON T2.MakeId  =  T4.Id WHERE T1.Weight  <  3500 AND T4.Maker  !=  \"Ford\"", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT * FROM airlines WHERE Abbreviation = 'UAL'", "g_str": ["SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT COUNT(*) FROM flights WHERE Airline = \"Jetblue Airways\"", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT FlightNo FROM flights WHERE Airline = \"United Airlines\"", "g_str": ["SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT FlightNo FROM flights WHERE Airline = \"United Airlines\"", "g_str": ["SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3", "g_str": ["SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT Template_Details FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)", "g_str": ["SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age ASC", "g_str": ["SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "museum_visit"], "hardness": "medium"}, {"p_str": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE hand = 'L' ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T3.first_name, T3.last_name FROM matches AS T1 JOIN players AS T3 ON T1.winner_id = T3.player_id WHERE T1.tourney_name = \"Australian Open\" AND T1.winner_id IS NOT NULL AND T1.winner_id IN (SELECT T2.player_id FROM rankings AS T2 WHERE T2.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = \"Australian Open\" AND winner_id IS NOT NULL)))", "g_str": ["SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT p.first_name, p.last_name  FROM players p  JOIN matches m ON p.player_id = m.winner_id  JOIN rankings r ON p.player_id = r.player_id  WHERE m.tourney_name = \"Australian Open\"  ORDER BY r.ranking_points DESC  LIMIT 1", "g_str": ["SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT t1.winner_id) FROM matches AS t1 JOIN players AS t2 ON t1.winner_id = t2.player_id WHERE t1.tourney_level = 'WTA Championships' AND t2.hand = 'L'", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')", "g_str": ["SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage != '225' OR ship.tonnage IS NULL", "g_str": ["SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT course_id, course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) < 2", "g_str": ["SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT student_id, first_name, middle_name, last_name FROM Students              JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id              JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id              GROUP BY Students.student_id, Student_Enrolment.semester_id              HAVING COUNT(DISTINCT Degree_Programs.degree_program_id) = 2", "g_str": ["SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T2.first_name, T2.middle_name, T2.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = \"Bachelor\"", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T2.student_id = T1.student_id JOIN degree_programs AS T3 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = 'Bachelors';", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT min(transcript_date), * FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id", "g_str": ["SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT first_name FROM students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'", "g_str": ["select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT t1.id) FROM cartoon AS t1 JOIN tv_channel AS t2 ON t1.channel  =  t2.id WHERE t2.series_name  =  \"Joseph Kuhr\"", "g_str": ["SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Brandon Vietti\"", "g_str": ["SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT series_name FROM TV_series WHERE Channel = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Air_Date FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel WHERE Cartoon.Title = \"A Love of a Lifetime\"", "g_str": ["SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT Episode FROM TV_series WHERE series_name = \"Sky Radio\"", "g_str": ["SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT T1.Package_Option ,  T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T1.Hight_definition_TV  =  true", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT package_option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = true", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Earnings < 200000", "g_str": ["SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "poker_player"], "hardness": "easy"}, {"p_str": "select state, count(*) from votes join area_code_state on votes.state = area_code_state.state where state = 'ny' or state = 'ca' group by state", "g_str": ["SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "voter_1"], "hardness": "medium"}, {"p_str": "SELECT SUM(country.SurfaceArea) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Region = \"Caribbean\"", "g_str": ["SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT region FROM country WHERE name = \"Kabul\"", "g_str": ["SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT avg(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Central Africa')", "g_str": ["SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT sum(city.population) AS total_population, max(country.gnp) AS largest_gnp FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = \"Asia\"", "g_str": ["SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT avg(GNP), sum(Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.GovernmentForm = \"US territory\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT AVG(T1.GNP) AS mean_GNP, SUM(T1.Population) AS total_population FROM country AS T1 WHERE T1.Region = \"US Territory\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT T1.GovernmentForm) FROM country AS T1 JOIN sqlite_sequence AS T2 ON T1.Code = T2.name WHERE T1.Continent = 'Africa'", "g_str": ["SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT Language FROM countrylanguage              JOIN country ON country.Code = countrylanguage.CountryCode              WHERE country.Continent = 'Asia'              GROUP BY Language              ORDER BY Percentage DESC              LIMIT 1", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT SUM(country.Population) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\") AND IsOfficial = \"T\"", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = \"Europe\")", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = \"Europe\")", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE Continent = \"Africa\" AND Population < ANY (SELECT Population FROM country WHERE Continent = \"Asia\")", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Europe\" AND countrylanguage.Language != \"English\" AND countrylanguage.IsOfficial = \"F\"", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT city.name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.Continent = 'Europe'", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country WHERE AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm", "g_str": ["SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "world_1"], "hardness": "medium"}, {"p_str": "SELECT country.Continent, SUM(country.Population) AS total_population, AVG(country.LifeExpectancy) AS average_life_expectancy FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent", "g_str": ["SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "world_1"], "hardness": "medium"}, {"p_str": "SELECT * FROM city WHERE population BETWEEN 160000 AND 900000", "g_str": ["SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "world_1"], "hardness": "easy"}, {"p_str": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL", "g_str": ["SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "orchestra"], "hardness": "hard"}, {"p_str": "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE record_format = \"CD\" OR record_format = \"DVD\"", "g_str": ["SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT AVG(T2.grade) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID", "g_str": ["SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "hard"}, {"p_str": "SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT P.first_name, P.last_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "g_str": ["SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.date_of_birth  =  (SELECT MIN(date_of_birth) FROM Dogs)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT count(*) FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NOT NULL", "g_str": ["SELECT count(DISTINCT professional_id) FROM Treatments", "dog_kennels"], "hardness": "easy"}, {"p_str": "SELECT T1.role ,  T1.street ,  T1.city ,  T1.state FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.city LIKE '%West%'", "g_str": ["SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL", "g_str": ["SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT count(*) FROM OWNERS JOIN DOGS ON OWNERS.owner_id = DOGS.owner_id WHERE DOGS.dog_id IS NULL", "g_str": ["SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT name FROM singer WHERE sales > 300000", "g_str": ["SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "singer"], "hardness": "medium"}, {"p_str": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [specified code]", "g_str": ["SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "real_estate_properties"], "hardness": "medium"}, {"p_str": "SELECT singer.Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(Age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium", "g_str": ["select max(capacity), average from stadium", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Highest = (SELECT MAX(stadium.Average) FROM stadium)", "g_str": ["SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (SELECT concert.Stadium_ID FROM concert WHERE concert.concert_ID = (SELECT singer_in_concert.concert_ID FROM singer_in_concert WHERE singer_in_concert.Singer_ID = (SELECT singer.Singer_ID FROM singer WHERE singer.Age = (SELECT MAX(singer.Age) FROM singer))))", "g_str": ["SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT weight FROM pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1", "g_str": ["SELECT weight FROM pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1", "pets_1"], "hardness": "hard"}, {"p_str": "SELECT weight FROM pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1", "g_str": ["SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT model FROM cars_data  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT name FROM employee ORDER BY bonus DESC LIMIT 1", "g_str": ["SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "employee_hire_evaluation"], "hardness": "hard"}, {"p_str": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code", "g_str": ["SELECT min(Version_Number) ,  template_type_code FROM Templates", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT AVG(rankings.ranking) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id", "g_str": ["SELECT avg(winner_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT AVG(rankings.ranking) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id", "g_str": ["SELECT avg(winner_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT MAX(loser_rank) FROM matches", "g_str": ["SELECT min(loser_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT MAX(loser_rank) FROM matches", "g_str": ["SELECT min(loser_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT CONCAT(players.first_name, ' ', players.last_name) AS full_name FROM players ORDER BY players.birth_date", "g_str": ["SELECT first_name ,  last_name FROM players ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name", "g_str": ["SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT players.first_name, players.last_name, rankings.ranking  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON players.player_id = rankings.player_id  ORDER BY players.birth_date ASC  LIMIT 3", "g_str": ["SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT name, date, result FROM battle", "g_str": ["SELECT name ,  date FROM battle", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT battle.name, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.name", "g_str": ["SELECT max(killed) ,  min(killed) FROM death", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.semester_id IS NULL", "g_str": ["SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT transcript_date, transcript_id  FROM transcripts  GROUP BY transcript_date, transcript_id  ORDER BY count(*) ASC  LIMIT 1", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT transcript_id, transcript_date FROM transcripts ORDER BY (SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents.transcript_id = transcripts.transcript_id) ASC LIMIT 1", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT permanent_address_id FROM students UNION SELECT current_address_id FROM students)", "g_str": ["SELECT count(DISTINCT current_address_id) FROM Students", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM students ORDER BY last_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE", "g_str": ["SELECT count(*) FROM area_code_state", "voter_1"], "hardness": "easy"}, {"p_str": "SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (SELECT MIN(Population) FROM country)", "g_str": ["SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "world_1"], "hardness": "medium"}, {"p_str": "SELECT name, grade FROM Highschooler", "g_str": ["SELECT grade FROM Highschooler", "network_1"], "hardness": "easy"}, {"p_str": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Breeds.breed_name = (     SELECT breed_name      FROM Breeds      GROUP BY breed_name      ORDER BY COUNT(*) ASC      LIMIT 1 )", "g_str": ["SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Breeds.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) ASC LIMIT 1)", "g_str": ["SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT date_arrived, date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id", "g_str": ["SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs ORDER BY age LIMIT 1)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT breed_name, size_description FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}]