[
    {
        "db_id": "concert_singer",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "concert_singer",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "foreign_keys": "Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n",
        "tables": "Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n",
        "types": {
            "stadium.Stadium_ID": "number",
            "stadium.Location": "text",
            "stadium.Name": "text",
            "stadium.Capacity": "number",
            "stadium.Highest": "number",
            "stadium.Lowest": "number",
            "stadium.Average": "number",
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Country": "text",
            "singer.Song_Name": "text",
            "singer.Song_release_year": "text",
            "singer.Age": "number",
            "singer.Is_male": "others",
            "concert.concert_ID": "number",
            "concert.concert_Name": "text",
            "concert.Theme": "text",
            "concert.Stadium_ID": "text",
            "concert.Year": "text",
            "singer_in_concert.concert_ID": "number",
            "singer_in_concert.Singer_ID": "text"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet type?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "pets_1",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "foreign_keys": "Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n",
        "tables": "Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n",
        "types": {
            "Student.StuID": "number",
            "Student.LName": "text",
            "Student.Fname": "text",
            "Student.Age": "number",
            "Student.Sex": "text",
            "Student.Major": "number",
            "Student.Advisor": "number",
            "Student.city_code": "text",
            "Has_Pet.StuID": "number",
            "Has_Pet.PetID": "number",
            "Pets.PetID": "number",
            "Pets.PetType": "text",
            "Pets.pet_age": "number",
            "Pets.weight": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "car_1",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "What is the number of countries with more than 2 car makers ?",
        "foreign_keys": "Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n",
        "tables": "Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n",
        "types": {
            "continents.ContId": "number",
            "continents.Continent": "text",
            "countries.CountryId": "number",
            "countries.CountryName": "text",
            "countries.Continent": "number",
            "car_makers.Id": "number",
            "car_makers.Maker": "text",
            "car_makers.FullName": "text",
            "car_makers.Country": "text",
            "model_list.ModelId": "number",
            "model_list.Maker": "number",
            "model_list.Model": "text",
            "car_names.MakeId": "number",
            "car_names.Model": "text",
            "car_names.Make": "text",
            "cars_data.Id": "number",
            "cars_data.MPG": "text",
            "cars_data.Cylinders": "number",
            "cars_data.Edispl": "number",
            "cars_data.Horsepower": "text",
            "cars_data.Weight": "number",
            "cars_data.Accelerate": "number",
            "cars_data.Year": "number"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "flight_2",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "foreign_keys": "Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n",
        "tables": "Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n",
        "types": {
            "airlines.uid": "number",
            "airlines.Airline": "text",
            "airlines.Abbreviation": "text",
            "airlines.Country": "text",
            "airports.City": "text",
            "airports.AirportCode": "text",
            "airports.AirportName": "text",
            "airports.Country": "text",
            "airports.CountryAbbrev": "text",
            "flights.Airline": "number",
            "flights.FlightNo": "number",
            "flights.SourceAirport": "text",
            "flights.DestAirport": "text"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "employee_hire_evaluation",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n",
        "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n",
        "types": {
            "employee.Employee_ID": "number",
            "employee.Name": "text",
            "employee.Age": "number",
            "employee.City": "text",
            "shop.Shop_ID": "number",
            "shop.Name": "text",
            "shop.Location": "text",
            "shop.District": "text",
            "shop.Number_products": "number",
            "shop.Manager_name": "text",
            "hiring.Shop_ID": "number",
            "hiring.Employee_ID": "number",
            "hiring.Start_from": "text",
            "hiring.Is_full_time": "others",
            "evaluation.Employee_ID": "text",
            "evaluation.Year_awarded": "text",
            "evaluation.Bonus": "number"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "foreign_keys": "Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n",
        "tables": "Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n",
        "types": {
            "Ref_Template_Types.Template_Type_Code": "text",
            "Ref_Template_Types.Template_Type_Description": "text",
            "Templates.Template_ID": "number",
            "Templates.Version_Number": "number",
            "Templates.Template_Type_Code": "text",
            "Templates.Date_Effective_From": "time",
            "Templates.Date_Effective_To": "time",
            "Templates.Template_Details": "text",
            "Documents.Document_ID": "number",
            "Documents.Template_ID": "number",
            "Documents.Document_Name": "text",
            "Documents.Document_Description": "text",
            "Documents.Other_Details": "text",
            "Paragraphs.Paragraph_ID": "number",
            "Paragraphs.Document_ID": "number",
            "Paragraphs.Paragraph_Text": "text",
            "Paragraphs.Other_Details": "text"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two teachers come from?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "course_teach",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "foreign_keys": "Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n",
        "tables": "Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n",
        "types": {
            "course.Course_ID": "number",
            "course.Staring_Date": "text",
            "course.Course": "text",
            "teacher.Teacher_ID": "number",
            "teacher.Name": "text",
            "teacher.Age": "text",
            "teacher.Hometown": "text",
            "course_arrange.Course_ID": "number",
            "course_arrange.Teacher_ID": "number",
            "course_arrange.Grade": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "museum_visit",
        "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "foreign_keys": "Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n",
        "tables": "Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n",
        "types": {
            "museum.Museum_ID": "number",
            "museum.Name": "text",
            "museum.Num_of_Staff": "number",
            "museum.Open_Year": "text",
            "visitor.ID": "number",
            "visitor.Name": "text",
            "visitor.Level_of_membership": "number",
            "visitor.Age": "number",
            "visit.Museum_ID": "number",
            "visit.visitor_ID": "text",
            "visit.Num_of_Ticket": "number",
            "visit.Total_spent": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their first name.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their total ranking points?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "wta_1",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "foreign_keys": "Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n",
        "tables": "Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n",
        "types": {
            "players.player_id": "number",
            "players.first_name": "text",
            "players.last_name": "text",
            "players.hand": "text",
            "players.birth_date": "time",
            "players.country_code": "text",
            "matches.best_of": "number",
            "matches.draw_size": "number",
            "matches.loser_age": "number",
            "matches.loser_entry": "text",
            "matches.loser_hand": "text",
            "matches.loser_ht": "number",
            "matches.loser_id": "number",
            "matches.loser_ioc": "text",
            "matches.loser_name": "text",
            "matches.loser_rank": "number",
            "matches.loser_rank_points": "number",
            "matches.loser_seed": "number",
            "matches.match_num": "number",
            "matches.minutes": "number",
            "matches.round": "text",
            "matches.score": "text",
            "matches.surface": "text",
            "matches.tourney_date": "time",
            "matches.tourney_id": "text",
            "matches.tourney_level": "text",
            "matches.tourney_name": "text",
            "matches.winner_age": "number",
            "matches.winner_entry": "text",
            "matches.winner_hand": "text",
            "matches.winner_ht": "number",
            "matches.winner_id": "number",
            "matches.winner_ioc": "text",
            "matches.winner_name": "text",
            "matches.winner_rank": "number",
            "matches.winner_rank_points": "number",
            "matches.winner_seed": "number",
            "matches.year": "number",
            "rankings.ranking_date": "time",
            "rankings.ranking": "number",
            "rankings.player_id": "number",
            "rankings.ranking_points": "number",
            "rankings.tours": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "battle_death",
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "foreign_keys": "Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n",
        "tables": "Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n",
        "types": {
            "battle.id": "number",
            "battle.name": "text",
            "battle.date": "text",
            "battle.bulgarian_commander": "text",
            "battle.latin_commander": "text",
            "battle.result": "text",
            "ship.lost_in_battle": "number",
            "ship.id": "number",
            "ship.name": "text",
            "ship.tonnage": "text",
            "ship.ship_type": "text",
            "ship.location": "text",
            "ship.disposition_of_ship": "text",
            "death.caused_by_ship_id": "number",
            "death.id": "number",
            "death.note": "text",
            "death.killed": "number",
            "death.injured": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id ,  count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "student_transcripts_tracking",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "foreign_keys": "Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n",
        "tables": "Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n",
        "types": {
            "Addresses.address_id": "number",
            "Addresses.line_1": "text",
            "Addresses.line_2": "text",
            "Addresses.line_3": "text",
            "Addresses.city": "text",
            "Addresses.zip_postcode": "text",
            "Addresses.state_province_county": "text",
            "Addresses.country": "text",
            "Addresses.other_address_details": "text",
            "Courses.course_id": "number",
            "Courses.course_name": "text",
            "Courses.course_description": "text",
            "Courses.other_details": "text",
            "Departments.department_id": "number",
            "Departments.department_name": "text",
            "Departments.department_description": "text",
            "Departments.other_details": "text",
            "Degree_Programs.degree_program_id": "number",
            "Degree_Programs.department_id": "number",
            "Degree_Programs.degree_summary_name": "text",
            "Degree_Programs.degree_summary_description": "text",
            "Degree_Programs.other_details": "text",
            "Sections.section_id": "number",
            "Sections.course_id": "number",
            "Sections.section_name": "text",
            "Sections.section_description": "text",
            "Sections.other_details": "text",
            "Semesters.semester_id": "number",
            "Semesters.semester_name": "text",
            "Semesters.semester_description": "text",
            "Semesters.other_details": "text",
            "Students.student_id": "number",
            "Students.current_address_id": "number",
            "Students.permanent_address_id": "number",
            "Students.first_name": "text",
            "Students.middle_name": "text",
            "Students.last_name": "text",
            "Students.cell_mobile_number": "text",
            "Students.email_address": "text",
            "Students.ssn": "text",
            "Students.date_first_registered": "time",
            "Students.date_left": "time",
            "Students.other_student_details": "text",
            "Student_Enrolment.student_enrolment_id": "number",
            "Student_Enrolment.degree_program_id": "number",
            "Student_Enrolment.semester_id": "number",
            "Student_Enrolment.student_id": "number",
            "Student_Enrolment.other_details": "text",
            "Student_Enrolment_Courses.student_course_id": "number",
            "Student_Enrolment_Courses.course_id": "number",
            "Student_Enrolment_Courses.student_enrolment_id": "number",
            "Transcripts.transcript_id": "number",
            "Transcripts.transcript_date": "time",
            "Transcripts.other_details": "text",
            "Transcript_Contents.student_course_id": "number",
            "Transcript_Contents.transcript_id": "number"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "tvshow",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "foreign_keys": "Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n",
        "tables": "Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n",
        "types": {
            "TV_Channel.id": "text",
            "TV_Channel.series_name": "text",
            "TV_Channel.Country": "text",
            "TV_Channel.Language": "text",
            "TV_Channel.Content": "text",
            "TV_Channel.Pixel_aspect_ratio_PAR": "text",
            "TV_Channel.Hight_definition_TV": "text",
            "TV_Channel.Pay_per_view_PPV": "text",
            "TV_Channel.Package_Option": "text",
            "TV_series.id": "number",
            "TV_series.Episode": "text",
            "TV_series.Air_Date": "text",
            "TV_series.Rating": "text",
            "TV_series.Share": "number",
            "TV_series.18_49_Rating_Share": "text",
            "TV_series.Viewers_m": "text",
            "TV_series.Weekly_Rank": "number",
            "TV_series.Channel": "text",
            "Cartoon.id": "number",
            "Cartoon.Title": "text",
            "Cartoon.Directed_by": "text",
            "Cartoon.Written_by": "text",
            "Cartoon.Original_air_date": "text",
            "Cartoon.Production_code": "number",
            "Cartoon.Channel": "text"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "poker_player",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n",
        "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n",
        "types": {
            "poker_player.Poker_Player_ID": "number",
            "poker_player.People_ID": "number",
            "poker_player.Final_Table_Made": "number",
            "poker_player.Best_Finish": "number",
            "poker_player.Money_Rank": "number",
            "poker_player.Earnings": "number",
            "people.People_ID": "number",
            "people.Nationality": "text",
            "people.Name": "text",
            "people.Birth_Date": "text",
            "people.Height": "number"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "voter_1",
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "foreign_keys": "Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n",
        "tables": "Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n",
        "types": {
            "AREA_CODE_STATE.area_code": "number",
            "AREA_CODE_STATE.state": "text",
            "CONTESTANTS.contestant_number": "number",
            "CONTESTANTS.contestant_name": "text",
            "VOTES.vote_id": "number",
            "VOTES.phone_number": "number",
            "VOTES.state": "text",
            "VOTES.contestant_number": "number",
            "VOTES.created": "time"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "world_1",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "foreign_keys": "Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n",
        "tables": "Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n",
        "types": {
            "city.ID": "number",
            "city.Name": "text",
            "city.CountryCode": "text",
            "city.District": "text",
            "city.Population": "number",
            "sqlite_sequence.name": "text",
            "sqlite_sequence.seq": "text",
            "country.Code": "text",
            "country.Name": "text",
            "country.Continent": "text",
            "country.Region": "text",
            "country.SurfaceArea": "number",
            "country.IndepYear": "number",
            "country.Population": "number",
            "country.LifeExpectancy": "number",
            "country.GNP": "number",
            "country.GNPOld": "number",
            "country.LocalName": "text",
            "country.GovernmentForm": "text",
            "country.HeadOfState": "text",
            "country.Capital": "number",
            "country.Code2": "text",
            "countrylanguage.CountryCode": "text",
            "countrylanguage.Language": "text",
            "countrylanguage.IsOfficial": "text",
            "countrylanguage.Percentage": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "orchestra",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "foreign_keys": "Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n",
        "tables": "Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n",
        "types": {
            "conductor.Conductor_ID": "number",
            "conductor.Name": "text",
            "conductor.Age": "number",
            "conductor.Nationality": "text",
            "conductor.Year_of_Work": "number",
            "orchestra.Orchestra_ID": "number",
            "orchestra.Orchestra": "text",
            "orchestra.Conductor_ID": "number",
            "orchestra.Record_Company": "text",
            "orchestra.Year_of_Founded": "number",
            "orchestra.Major_Record_Format": "text",
            "performance.Performance_ID": "number",
            "performance.Orchestra_ID": "number",
            "performance.Type": "text",
            "performance.Date": "text",
            "performance.Official_ratings_(millions)": "number",
            "performance.Weekly_rank": "text",
            "performance.Share": "text",
            "show.Show_ID": "number",
            "show.Performance_ID": "number",
            "show.If_first_show": "others",
            "show.Result": "text",
            "show.Attendance": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "network_1",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "foreign_keys": "Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n",
        "tables": "Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n",
        "types": {
            "Highschooler.ID": "number",
            "Highschooler.name": "text",
            "Highschooler.grade": "number",
            "Friend.student_id": "number",
            "Friend.friend_id": "number",
            "Likes.student_id": "number",
            "Likes.liked_id": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "dog_kennels",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "foreign_keys": "Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n",
        "tables": "Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n",
        "types": {
            "Breeds.breed_code": "text",
            "Breeds.breed_name": "text",
            "Charges.charge_id": "number",
            "Charges.charge_type": "text",
            "Charges.charge_amount": "number",
            "Sizes.size_code": "text",
            "Sizes.size_description": "text",
            "Treatment_Types.treatment_type_code": "text",
            "Treatment_Types.treatment_type_description": "text",
            "Owners.owner_id": "number",
            "Owners.first_name": "text",
            "Owners.last_name": "text",
            "Owners.street": "text",
            "Owners.city": "text",
            "Owners.state": "text",
            "Owners.zip_code": "text",
            "Owners.email_address": "text",
            "Owners.home_phone": "text",
            "Owners.cell_number": "text",
            "Dogs.dog_id": "number",
            "Dogs.owner_id": "number",
            "Dogs.abandoned_yn": "text",
            "Dogs.breed_code": "text",
            "Dogs.size_code": "text",
            "Dogs.name": "text",
            "Dogs.age": "text",
            "Dogs.date_of_birth": "time",
            "Dogs.gender": "text",
            "Dogs.weight": "text",
            "Dogs.date_arrived": "time",
            "Dogs.date_adopted": "time",
            "Dogs.date_departed": "time",
            "Professionals.professional_id": "number",
            "Professionals.role_code": "text",
            "Professionals.first_name": "text",
            "Professionals.street": "text",
            "Professionals.city": "text",
            "Professionals.state": "text",
            "Professionals.zip_code": "text",
            "Professionals.last_name": "text",
            "Professionals.email_address": "text",
            "Professionals.home_phone": "text",
            "Professionals.cell_number": "text",
            "Treatments.treatment_id": "number",
            "Treatments.dog_id": "number",
            "Treatments.professional_id": "number",
            "Treatments.treatment_type_code": "text",
            "Treatments.date_of_treatment": "time",
            "Treatments.cost_of_treatment": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the maximum net worth?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "singer",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "foreign_keys": "Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n",
        "tables": "Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n",
        "types": {
            "singer.Singer_ID": "number",
            "singer.Name": "text",
            "singer.Birth_Year": "number",
            "singer.Net_Worth_Millions": "number",
            "singer.Citizenship": "text",
            "song.Song_ID": "number",
            "song.Title": "text",
            "song.Singer_ID": "number",
            "song.Sales": "number",
            "song.Highest_Position": "number"
        }
    },
    {
        "db_id": "real_estate_properties",
        "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "foreign_keys": "Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n",
        "tables": "Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n",
        "types": {
            "Ref_Feature_Types.feature_type_code": "text",
            "Ref_Feature_Types.feature_type_name": "text",
            "Ref_Property_Types.property_type_code": "text",
            "Ref_Property_Types.property_type_description": "text",
            "Other_Available_Features.feature_id": "number",
            "Other_Available_Features.feature_type_code": "text",
            "Other_Available_Features.feature_name": "text",
            "Other_Available_Features.feature_description": "text",
            "Properties.property_id": "number",
            "Properties.property_type_code": "text",
            "Properties.date_on_market": "time",
            "Properties.date_sold": "time",
            "Properties.property_name": "text",
            "Properties.property_address": "text",
            "Properties.room_count": "number",
            "Properties.vendor_requested_price": "number",
            "Properties.buyer_offered_price": "number",
            "Properties.agreed_selling_price": "number",
            "Properties.apt_feature_1": "text",
            "Properties.apt_feature_2": "text",
            "Properties.apt_feature_3": "text",
            "Properties.fld_feature_1": "text",
            "Properties.fld_feature_2": "text",
            "Properties.fld_feature_3": "text",
            "Properties.hse_feature_1": "text",
            "Properties.hse_feature_2": "text",
            "Properties.hse_feature_3": "text",
            "Properties.oth_feature_1": "text",
            "Properties.oth_feature_2": "text",
            "Properties.oth_feature_3": "text",
            "Properties.shp_feature_1": "text",
            "Properties.shp_feature_2": "text",
            "Properties.shp_feature_3": "text",
            "Properties.other_property_details": "text",
            "Other_Property_Features.property_id": "number",
            "Other_Property_Features.feature_id": "number",
            "Other_Property_Features.property_feature_description": "text"
        }
    }
]