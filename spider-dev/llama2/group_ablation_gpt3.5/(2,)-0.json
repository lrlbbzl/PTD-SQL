[{"db_id": "employee_hire_evaluation", "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "question": "Find the names of stores whose number products is more than the average number of products.", "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n", "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n", "types": {"employee.Employee_ID": "number", "employee.Name": "text", "employee.Age": "number", "employee.City": "text", "shop.Shop_ID": "number", "shop.Name": "text", "shop.Location": "text", "shop.District": "text", "shop.Number_products": "number", "shop.Manager_name": "text", "hiring.Shop_ID": "number", "hiring.Employee_ID": "number", "hiring.Start_from": "text", "hiring.Is_full_time": "others", "evaluation.Employee_ID": "text", "evaluation.Year_awarded": "text", "evaluation.Bonus": "number"}, "number": 64, "hardness": "hard", "reasoning": "<1> Operation: The query requires finding the names of stores whose number of products is more than the average number of products. To achieve this, we need to compare the 'Number_products' column in the 'shop' table with the average value of the 'Number_products' column in the same table.\n\n<2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. Since we need to compare the 'Number_products' column in the 'shop' table, we only need to use the 'shop' table.\n\n<3> SQL Generation: The query requires finding the names of stores whose number of products is more than the average number of products, so we should select the 'Name' column from the 'shop' table and filter for the stores where the 'Number_products' column is greater than the average value of the 'Number_products' column in the 'shop' table.\n\n", "predict": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"}, {"db_id": "employee_hire_evaluation", "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "question": "Which shops' number products is above the average? Give me the shop names.", "foreign_keys": "Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n", "tables": "Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n", "types": {"employee.Employee_ID": "number", "employee.Name": "text", "employee.Age": "number", "employee.City": "text", "shop.Shop_ID": "number", "shop.Name": "text", "shop.Location": "text", "shop.District": "text", "shop.Number_products": "number", "shop.Manager_name": "text", "hiring.Shop_ID": "number", "hiring.Employee_ID": "number", "hiring.Start_from": "text", "hiring.Is_full_time": "others", "evaluation.Employee_ID": "text", "evaluation.Year_awarded": "text", "evaluation.Bonus": "number"}, "number": 65, "hardness": "hard", "reasoning": "<1> Operation: The query requires the shops whose number of products is above the average. So, we should apply the 'average' operation to the 'Number_products' column in the 'shop' table and compare it with the 'Number_products' column for each shop.\n\n<2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. In this question, we only need to use table ['shop'].\n\n<3> SQL Generation: The query requires the shop names whose number of products is above the average. So, we should select the 'Name' column in the 'shop' table and filter the shops based on the condition that the 'Number_products' column is greater than the average of the 'Number_products' column in the 'shop' table.\n\n", "predict": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"}, {"db_id": "poker_player", "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "foreign_keys": "Foreign_keys = [poker_player.People_ID = people.People_ID]\n", "tables": "Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n", "types": {"poker_player.Poker_Player_ID": "number", "poker_player.People_ID": "number", "poker_player.Final_Table_Made": "number", "poker_player.Best_Finish": "number", "poker_player.Money_Rank": "number", "poker_player.Earnings": "number", "people.People_ID": "number", "people.Nationality": "text", "people.Name": "text", "people.Birth_Date": "text", "people.Height": "number"}, "number": 168, "hardness": "easy", "reasoning": "<1> Operation: The query requires the maximum number of final tables made among poker players with earnings less than 200000, so we should apply the 'max' operation to the 'Final_Table_Made' column in the 'poker_player' table. Additionally, we need to filter the players based on their earnings, so we should apply the 'less than' operation to the 'Earnings' column in the 'poker_player' table.\n\n<2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. In this question, we need to use tables ['poker_player'] and ['people'].\n\n<3> SQL Generation: The query requires the maximum number of final tables made among poker players with earnings less than 200000, so we should select the 'Final_Table_Made' column in the 'poker_player' table and filter the players based on their earnings using the 'less than' operation. We also need to join the 'poker_player' table with the 'people' table using the foreign key relationship.\n\n", "predict": "SELECT MAX(Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings < 200000"}]