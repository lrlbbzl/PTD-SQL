SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
SELECT stadium.Name, COUNT(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY concert.Stadium_ID
SELECT Stadium_ID, COUNT(concert_ID) FROM singer_in_concert GROUP BY Stadium_ID
select year, count(*) from concert group by year order by count(*) desc limit 1
SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT concert.name, concert.theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.concert_ID
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT Orders.Customer_ID, SUM(Orders.Total_Amount) AS total_spent FROM Orders JOIN Customers ON Orders.Customer
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.Fname, Student.Sex HAVING COUNT(Has_Pet.PetID) > 1 LIMIT 1
SELECT Fname, Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT car_makers.Maker, car_makers.FullName, car_makers.Id, COUNT(car_names.Model) AS Number_of_Models FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Maker, car_makers.FullName, car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT continents.Continent, COUNT(car_makers.Id) AS count FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Id) FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT car_makers.FullName, COUNT(car_names.Model) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.FullName
SELECT CountryName, CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName, CountryId HAVING COUNT(car_makers.Id) >= 1
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT CountryName FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  GROUP BY Country  HAVING COUNT(*) >= 3  AND continents.Continent = 'Europe'
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT model_list.Model, COUNT(DISTINCT car_names.Make) FROM model_list JOIN car_names ON model_list.Maker = car_names.Model GROUP BY model_list.Model ORDER BY COUNT(DISTINCT car_names.Make) DESC LIMIT 1
SELECT Model, COUNT(*) FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1
SELECT Maker, FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(model_list.Model) > 3
SELECT COUNT(countries.CountryId) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE COUNT(car_makers.Id) > 2
SELECT COUNT(CountryName) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE COUNT(car_makers.Id) > 2
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT City FROM airports INNER JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City, COUNT(flights.DestAirport) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT City FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY flights.SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.AirportCode FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1
SELECT Airline, COUNT(FlightNo) FROM flights GROUP BY Airline ORDER BY COUNT(FlightNo) DESC LIMIT 1
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)
SELECT airlines.Abbreviation, airports.Country  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY flights.Airline  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY Airline HAVING COUNT(FlightNo) >= 10
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location
SELECT Manager_name, District FROM shop GROUP BY Shop_ID ORDER BY Number_products DESC LIMIT 1
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY MAX(evaluation.Year_awarded) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID
SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Documents.Template_ID, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1
SELECT Template_Type_Code FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, COUNT(Documents.Document_ID) AS Document_Count  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description
SELECT Templates.Template_Type_Code FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  JOIN Documents ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
SELECT Templates.Template_Type_Code, COUNT(Templates.Template_Type_Code) AS Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY Count DESC LIMIT 1
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Document_ID, COUNT(Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  HAVING COUNT(Paragraphs.Paragraph_ID) = (SELECT MAX(paragraph_count)                                           FROM (SELECT COUNT(Paragraphs.Paragraph_ID) AS paragraph_count                                                 FROM Paragraphs                                                 GROUP BY Paragraphs.Document_ID) AS counts)
SELECT Document_ID, Document_Name FROM Documents GROUP BY Document_ID, Document_Name ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT T2.Hometown, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown
SELECT teacher.Hometown, COUNT(teacher.Teacher_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2
SELECT Hometown FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Hometown HAVING COUNT(teacher.Teacher_ID) >= 2
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID
SELECT Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(course_arrange.Course_ID) >= 2
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(visit.visitor_ID) > 1
SELECT ID, Name, Level_of_membership FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY SUM(Total_spent) DESC LIMIT 1)
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.visitor_ID) DESC LIMIT 1
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name, visitor.Age ORDER BY MAX(visit.Num_of_Ticket) DESC LIMIT 1
SELECT AVG(loser_age), AVG(winner_age) FROM matches   ## Tables: Table sales, columns = [*,sale_id,product_id,sale_date,quantity,price] Table products, columns = [*,product_id,product_name,category_id,brand_id] Table categories, columns = [*,category_id,category_name] Table brands, columns = [*,brand_id,brand_name]  ## Foreign_keys: [sales.product_id = products.product_id,products.category_id = categories.category_id,products.brand_id = brands.brand_id]  ## Query: Return the total sales quantity and revenue for each category, in descending order of revenue.  Let's think step by step.  <1> Operation: The query requires the total sales quantity and revenue for each category, so we should apply the 'sum' operation to the 'quantity' and 'price' columns in the 'sales' table, and sort it in descending order. Since the unit to which the sales being counted in the query belong is the category, we should apply the 'group by' operation to the 'category_id' column in the 'products' table.  <2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. In this question, we need to use tables ['sales'] and ['products'].  <3> SQL Generation: The query requires the total sales quantity and revenue for each category, so we should select the 'category_name' column in the 'categories' table, sum the 'quantity' column in the 'sales' table, and calculate the revenue by multiplying the 'quantity' and 'price' columns in the 'sales' table. Then, we should group
select tourney_name from tourney join (select tourney_id, count(*) from matches group by tourney_id) as match_counts on tourney.tourney_id = match_counts.tourney_id where match_counts.match_count > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT players.first_name, players.country_code FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
SELECT players.first_name, players.last_name, players.ranking_points  FROM matches  JOIN players ON matches.winner_id = players.player_id  GROUP BY matches.winner_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT p.first_name, p.last_name, r.ranking_points  FROM players p  JOIN rankings r ON p.player_id = r.player_id  WHERE p.player_id = (     SELECT winner_id      FROM matches      GROUP BY winner_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT m.loser_name, m.winner_name  FROM matches m  JOIN players p ON m.loser_id = p.player_id  JOIN players p2 ON m.winner_id = p2.player_id  WHERE m.minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id, players.first_name
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
select country_code from players group by country_code having count(*) = (select max(player_count) from (select count(*) from players group by country_code) as counts)
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date
SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date
SELECT year, COUNT(match_num) FROM matches GROUP BY year
SELECT year, COUNT(match_num) FROM matches GROUP BY year
SELECT players.first_name, players.country_code, players.birth_date  FROM players  JOIN matches ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date  FROM players  JOIN matches ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  GROUP BY players.first_name, players.country_code, players.birth_date  ORDER BY SUM(matches.winner_rank_points) DESC  LIMIT 1
SELECT hand, COUNT(*) FROM players GROUP BY hand
SELECT hand, COUNT(player_id) FROM players GROUP BY hand
SELECT id, name FROM battle JOIN death ON battle.id = ship.lost_in_battle GROUP BY id, name HAVING SUM(killed) > 10
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT department_id, department_name FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1)
SELECT course_id, course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2
SELECT Semesters.semester_name, Semesters.semester_id FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Student_Enrolment.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name HAVING COUNT(Student_Enrolment.student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY semester_id) AS counts)
SELECT first_name, middle_name, last_name, student_id  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id  GROUP BY student_id, semester_id  HAVING COUNT(Degree_Programs.degree_program_id) = 2
SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT degree_program_id, degree_summary_description FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS enrollments  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name  ORDER BY enrollments DESC  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(*)  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT course_name, COUNT(*) FROM Student_Enrolment JOIN Courses ON Student_Enrolment.course_id = Courses.course_id GROUP BY Student_Enrolment.course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.transcript_date, T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) >= 2
SELECT transcript_id, transcript_date  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  GROUP BY transcript_id, transcript_date  HAVING COUNT(Student_Enrolment_Courses.course_id) >= 2
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)
select student_course_id, count(*) from transcript_contents group by student_course_id order by count(*) desc limit 1   ## tables: table employees, columns = [*,employee_id,first_name,last_name,department_id,job_title,date_of_birth,date_of_hire,salary,manager_id] table departments, columns = [*,department_id,department_name,location_id] table locations, columns = [*,location_id,street_address,city,state_province,country,postal_code]  ## foreign_keys: [employees.department_id = departments.department_id,departments.location_id = locations.location_id]  ## query: what is the average salary of employees in each department?  let's think step by step.  <1> operation: the query requires finding the average salary of employees in each department, so we should apply the 'average' operation to the 'salary' column in the 'employees' table and group it by the 'department_id' column.  <2> schema linking: in this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. in this question, we need to use tables 'employees' and 'departments'.  <3> sql generation: the query requires finding the average salary of employees in each department, so we should select the 'department_id' column from the 'employees' table and apply the 'average' operation to the 'salary' column. we also need to include the 'department_name' column from the 'departments'
SELECT SEC.course_id, SEC.student_enrolment_id FROM Student_Enrolment_Courses SEC JOIN Courses C ON SEC.course_id = C.course_id GROUP BY SEC.course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1
SELECT Country, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1
SELECT Language, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1
SELECT Language, COUNT(id) AS channel_count FROM TV_Channel GROUP BY Language ORDER BY channel_count ASC LIMIT 1
SELECT TV_Channel.Language, COUNT(TV_Channel.id) FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(TV_Channel.id) FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id GROUP BY TV_Channel.Language
SELECT Directed_by, COUNT(id) FROM Cartoon WHERE Directed_by IN (list_of_directors) GROUP BY Directed_by
SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by   ## Tables: Table Sales, columns = [*,Sale_ID,Product_ID,Customer_ID,Sale_Date,Quantity,Price] Table Product, columns = [*,Product_ID,Product_Name,Category,Price,Supplier_ID] Table Customer, columns = [*,Customer_ID,Customer_Name,Address,Phone_Number]  ## Foreign_keys: [Sales.Product_ID = Product.Product_ID, Sales.Customer_ID = Customer.Customer_ID]  ## Query: Return the total sales revenue for each product category.  Let's think step by step.  <1> Operation: The query requires calculating the total sales revenue for each product category, so we should apply the 'sum' operation to the 'Quantity' column multiplied by the 'Price' column in the 'Sales' table. Additionally, we need to group the results by the 'Category' column in the 'Product' table.  <2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. In this question, we need to use tables ['Sales', 'Product'].  <3> SQL Generation: The query requires calculating the total sales revenue for each product category, so we should select the 'Category' column and apply the 'sum' operation to the 'Quantity' column multiplied by the 'Price' column in the 'Sales' table. We also need to join the 'Sales' table with the 'Product' table using the 'Product_ID' column. Finally, we need to group the
select tv_channel.id from tv_channel join (select tv_channel.country, count(*) from tv_channel group by tv_channel.country) as country_count on tv_channel.country = country_count.country where country_count.channel_count > 2
SELECT id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel GROUP BY id HAVING COUNT(*) > 2
SELECT MAX(Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings < 200000
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY poker_player.People_ID ORDER BY COUNT(poker_player.Final_Table_Made) ASC
SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality, COUNT(Nationality) FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2
SELECT area_code FROM AREA_CODE_STATE WHERE state = (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1
SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS num_languages  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  HAVING num_languages >= 3
SELECT country.Name, COUNT(countrylanguage.Language) AS Language_Count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING Language_Count > 2
SELECT District, COUNT(ID) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT District, COUNT(ID) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE (SELECT AVG(LifeExpectancy) FROM country) > 72 GROUP BY GovernmentForm
SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT Language, COUNT(CountryCode) FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
SELECT Language, COUNT(CountryCode) FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
SELECT country.Name, countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code)  GROUP BY country.Code
SELECT country.Code, countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Code  HAVING MAX(countrylanguage.Percentage)
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code ORDER BY MAX(countrylanguage.Percentage) DESC LIMIT 1
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT performance.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name, COUNT(orchestra.Orchestra_ID) AS orchestra_count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY orchestra_count DESC LIMIT 1
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT orchestra.Record_Company, COUNT(orchestra.Orchestra_ID) AS num_orchestras FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY orchestra.Record_Company
select major_record_format, count(*) from orchestra group by major_record_format order by count(*) desc
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(performance.Performance_ID) > 1
SELECT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT Friend.student_id, COUNT(Friend.friend_id) FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID GROUP BY Friend.student_id
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(friend_id) >= 3
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
SELECT student_id, COUNT(student_id) FROM Likes GROUP BY student_id
SELECT Highschooler.name, COUNT(Likes.student_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY name HAVING COUNT(*) >= 2
SELECT Highschooler.name FROM Likes, Highschooler WHERE Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(Likes.liked_id) >= 2
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE grade > 5 GROUP BY name HAVING COUNT(friend_id) >= 2
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT professional_id, role_code, first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name  FROM Treatments  JOIN Dogs ON Treatments.dog_id = Dogs.dog_id  JOIN Owners ON Dogs.owner_id = Owners.owner_id  GROUP BY Owners.owner_id  ORDER BY COUNT(Treatments.treatment_id) DESC  LIMIT 1
SELECT Owners.owner_id, Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  GROUP BY Dogs.owner_id  ORDER BY SUM(Treatments.cost_of_treatment) DESC  LIMIT 1
SELECT Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_description  ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id HAVING SUM(Treatments.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id) AS dog_costs)
SELECT owner_id, zip_code FROM Owners WHERE owner_id = (SELECT owner_id FROM Charges GROUP BY owner_id ORDER BY SUM(charge_amount) DESC LIMIT 1)
SELECT Professionals.professional_id, Professionals.cell_number  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Professionals.professional_id  HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2
SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT charge_type, charge_amount FROM Charges
SELECT DISTINCT breed_code, size_code FROM Breeds, Sizes   ## Tables: Table Employees, columns = [*,Employee_ID,First_Name,Last_Name,Email,Phone_Number,Hire_Date,Job_ID,Salary,Commission_Pct,Manager_ID,Department_ID] Table Departments, columns = [*,Department_ID,Department_Name,Manager_ID,Location_ID] Table Locations, columns = [*,Location_ID,Street_Address,Postal_Code,City,State_Province,Country_ID] Table Jobs, columns = [*,Job_ID,Job_Title,Min_Salary,Max_Salary] Table Countries, columns = [*,Country_ID,Country_Name,Region_ID] Table Regions, columns = [*,Region_ID,Region_Name]  ## Foreign_keys: [Employees.Department_ID = Departments.Department_ID,Departments.Location_ID = Locations.Location_ID,Departments.Manager_ID = Employees.Employee_ID,Jobs.Job_ID = Employees.Job_ID,Locations.Country_ID = Countries.Country_ID,Countries.Region_ID = Regions.Region_ID]  ## Query: Return the department name and the average salary of employees in each department.  Let's think step by step.  <1> Operation: The query requires the department name and the average salary of employees in each department, so we should apply the 'average' operation to the 'Salary' column in the 'Employees' table and group the result by the 'Department_Name' column in the 'Departments' table.  <2> Schema Linking: In this step, we identify the tables and columns that should be used based on the first step and the foreign key relationships. In this question, we only need to use tables ['Employees', 'Departments'].  <3>
SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship
SELECT singer.Citizenship, COUNT(singer.Singer_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1
select citizenship, count(*) from singer group by citizenship order by count(*) desc limit 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(*) > 1
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30
SELECT Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014
SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) INTERSECT SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)
SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) INTERSECT SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)
SELECT DISTINCT Student.Fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' UNION SELECT DISTINCT Student.Fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog'
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog'
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' INTERSECT SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog'
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = "cat")
SELECT S.Major, S.Age FROM Student AS S WHERE NOT EXISTS (SELECT * FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = "cat")
SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T1.StuID FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = "cat"
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = "cat"))
SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = "dog" INTERSECT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType != "cat"
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = "dog") EXCEPT SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = "cat")
SELECT T1.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T3 ON T2.Model  =  T3.Model WHERE T1.Maker  =  "General Motors" UNION SELECT T4.Model FROM cars_data AS T4 WHERE T4.Weight > 3500
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000
SELECT CountryName FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.CountryId = car_makers.Country)
SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryId, CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 UNION SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make = 'fiat'
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (     SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 ) UNION SELECT CountryId, CountryName FROM countries WHERE CountryId IN (     SELECT DISTINCT countries.CountryId FROM countries     JOIN model_list ON countries.CountryId = model_list.Maker     JOIN car_names ON model_list.ModelId = car_names.MakeId     WHERE car_names.Model = 'fiat' )
SELECT Airline FROM airlines WHERE EXISTS (SELECT * FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG' AND airlines.uid = flights.Airline) INTERSECT SELECT Airline FROM airlines WHERE EXISTS (SELECT * FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.uid = flights.Airline)
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.AirportName = "APG" INTERSECT SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.AirportName = "CVO"
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'CVO' EXCEPT SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'APG'
SELECT DISTINCT T3.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.uid WHERE T2.AirportCode = "CVO" EXCEPT SELECT DISTINCT T3.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.uid WHERE T2.AirportCode = "APG"
SELECT AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL
SELECT * FROM airports WHERE NOT EXISTS (SELECT * FROM flights WHERE airports.AirportCode = flights.SourceAirport) UNION SELECT * FROM airports WHERE NOT EXISTS (SELECT * FROM flights WHERE airports.AirportCode = flights.DestAirport)
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000
SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000
SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE NOT EXISTS (SELECT * FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T2.Template_Type_Code = T1.Template_Type_Code)
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'
SELECT Name FROM teacher WHERE Age = 32 UNION SELECT Name FROM teacher WHERE Age = 33
SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 INTERSECT SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011
SELECT DISTINCT T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2013 INTERSECT SELECT DISTINCT T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2016
SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016
SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' GROUP BY T1.player_id HAVING COUNT(T2.match_num) > 0 INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' GROUP BY T1.player_id HAVING COUNT(T2.match_num) > 0
SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' INTERSECT SELECT T3.winner_id FROM matches AS T3 JOIN players AS T4 ON T3.winner_id = T4.player_id WHERE T4.hand = 'Left'
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" AND T1.student_id NOT IN (SELECT T3.student_id FROM Student_Enrolment AS T3 WHERE T3.degree_program_id IS NOT NULL)
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" INTERSECT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id IS NULL
SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master')) INTERSECT SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))
SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Masters" INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Bachelors"
SELECT first_name FROM Students WHERE country = "Haiti" OR cell_mobile_number = "09700166582"
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  "Todd Casey"
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel EXCEPT SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  "Todd Casey"
SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') INTERSECT SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')
SELECT T1.id FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones' AND T2.Channel = T1.id)
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Directed_by = "Ben Jones")
SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones' AND T2.Channel = T1.id)
SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T2.Directed_by = "Ben Jones" AND T2.Channel = T1.id)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling') INTERSECT SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Kelly Clauss')
SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T
SELECT COUNT(*) FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = "English" INTERSECT SELECT COUNT(*) FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = "Dutch"
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') INTERSECT SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT C1.Name FROM country AS C1 JOIN countrylanguage AS CL1 ON C1.Code = CL1.CountryCode WHERE CL1.Language = "English" INTERSECT SELECT C2.Name FROM country AS C2 JOIN countrylanguage AS CL2 ON C2.Code = CL2.CountryCode WHERE CL2.Language = "French"
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') INTERSECT SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" UNION SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch"
SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Dutch" UNION SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"
SELECT C1.Name FROM country AS C1 JOIN countrylanguage AS CL1 ON C1.Code  =  CL1.CountryCode WHERE CL1.Language  =  "English" AND CL1.IsOfficial  =  "T" UNION SELECT C2.Name FROM country AS C2 JOIN countrylanguage AS CL2 ON C2.Code  =  CL2.CountryCode WHERE CL2.Language  =  "Dutch" AND CL2.IsOfficial  =  "T"
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') UNION SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')
SELECT C1.Code FROM country AS C1 WHERE C1.Code NOT IN (SELECT CL.CountryCode FROM countrylanguage AS CL WHERE CL.Language = "English") EXCEPT SELECT C2.Code FROM country AS C2 WHERE C2.GovernmentForm = "Republic"
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') EXCEPT SELECT Code FROM country WHERE GovernmentForm = 'Republic'
SELECT Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id IS NULL
SELECT ID FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id IS NULL
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2) INTERSECT SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.liked_id FROM Likes AS T2)
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes
SELECT DISTINCT Highschooler.name FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID INTERSECT SELECT DISTINCT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID
SELECT DISTINCT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID INTERSECT SELECT DISTINCT Highschooler.name FROM Likes JOIN Highschooler ON Likes.liked_id = Highschooler.ID
SELECT DISTINCT Owners.state FROM Owners INTERSECT SELECT DISTINCT Professionals.state FROM Professionals
SELECT DISTINCT T1.state FROM Owners AS T1 INTERSECT SELECT DISTINCT T2.state FROM Professionals AS T2
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana'  UNION  SELECT T1.professional_id, T1.last_name, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id, T1.last_name, T1.cell_number  HAVING COUNT(T2.treatment_id) > 2
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana'  UNION  SELECT T1.professional_id, T1.last_name, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id, T1.last_name, T1.cell_number  HAVING COUNT(T2.treatment_id) > 2
SELECT D.name FROM Dogs AS D WHERE NOT EXISTS (SELECT * FROM Treatments AS T WHERE T.dog_id = D.dog_id AND T.cost_of_treatment > 1000)
SELECT T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T1.dog_id  =  T3.dog_id JOIN Charges AS T4 ON T3.treatment_type_code  =  T4.charge_type WHERE T4.charge_amount <= 1000
SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT DISTINCT first_name FROM Owners EXCEPT SELECT DISTINCT name FROM Dogs
SELECT first_name FROM Professionals EXCEPT SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs
SELECT P.professional_id, P.role_code, P.email_address FROM Professionals AS P WHERE NOT EXISTS (SELECT * FROM Treatments AS T WHERE T.professional_id = P.professional_id)
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE NOT EXISTS (SELECT * FROM Treatments AS T2 WHERE T1.professional_id = T2.professional_id)
SELECT email_address FROM Professionals WHERE state = 'Hawaii' UNION SELECT email_address FROM Professionals WHERE state = 'Wisconsin'
SELECT email_address FROM professionals JOIN owners ON professionals.owner_id = owners.owner_id WHERE owners.state = 'Hawaii' UNION SELECT email_address FROM professionals JOIN owners ON professionals.owner_id = owners.owner_id WHERE owners.state = 'Wisconsin'
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
SELECT citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT citizenship FROM singer WHERE Birth_Year > 1955
SELECT property_name FROM Properties  WHERE property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'house')  AND room_count > 1 UNION SELECT property_name FROM Properties  WHERE property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'apartment')  AND room_count > 1
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) INTERSECT SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) > 3)
SELECT Id, Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Id, Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 INTERSECT SELECT Id, Maker FROM car_makers INNER JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY Id, Maker HAVING COUNT(DISTINCT car_names.Model) > 3
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'
SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = "English"
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = "English")
SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT singer.Song_Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location, name FROM stadium WHERE capacity >= 5000 AND capacity <= 10000
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT T4.Name, T4.Capacity  FROM concert AS T1  JOIN stadium AS T4 ON T1.Stadium_ID = T4.Stadium_ID  WHERE T1.Year >= 2014  GROUP BY T1.Stadium_ID  ORDER BY COUNT(T1.concert_ID) DESC  LIMIT 1
SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year > 2013) GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT Name, Country FROM singer WHERE Song_Name LIKE "%Hey%"
SELECT singer.Name, singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer_in_concert.Song_Name LIKE '%Hey%'
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT COUNT(PetID) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
SELECT COUNT(Has_Pet.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20
SELECT COUNT(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Sex = "F" AND T1.PetType = "dog"
SELECT COUNT(*) FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT PetID, weight FROM pets WHERE pet_age > 1
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith')
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = 'cat'
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))
SELECT model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Id FROM cars_data WHERE Year = 1970)
SELECT Make, Year FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980
SELECT cars_data.Accelerate FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'amc hornet sportabout (sw)'
SELECT Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'AMC' AND car_names.Model = 'Hornet Sportabout (sw)'
SELECT COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = "France"
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France'
SELECT COUNT(DISTINCT T3.Model) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN model_list AS T3 ON T2.Id  =  T3.Maker WHERE T1.CountryName  =  "usa"
SELECT COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN model_list AS T3 ON T1.Id = T3.Maker WHERE T2.CountryName = "United States"
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT MAX(Horsepower), Maker FROM cars_data              JOIN car_names ON cars_data.Id = car_names.MakeId              JOIN model_list ON car_names.Model = model_list.Model              JOIN car_makers ON model_list.Maker = car_makers.Id              WHERE Cylinders = 3              GROUP BY Maker
SELECT MAX(Horsepower), Maker FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE Cylinders = 3
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE model_list.Model = 'volvo'
SELECT AVG(Edispl) FROM cars_data              JOIN car_names ON cars_data.Id = car_names.MakeId              JOIN model_list ON car_names.Model = model_list.Model              JOIN car_makers ON model_list.Maker = car_makers.Id              WHERE car_makers.Maker = 'Volvo'
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "General Motors" OR cars_data.Weight > 3500
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT Cylinders FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo') ORDER BY Accelerate ASC LIMIT 1
SELECT MIN(T3.Cylinders) FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T2.Maker = (SELECT Id FROM car_makers WHERE Maker = "Volvo") AND T3.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = T1.MakeId)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3
SELECT car_makers.Id, car_makers.Maker FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Horsepower != (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders < 4
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT T1.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model WHERE T1.Weight < 3500 AND T3.Maker != 'Ford Motor Company'
SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T1.Weight < 3500 AND T2.Maker != "Ford Motor Company"
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE Maker IS NULL
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"
SELECT AirportCode, AirportName FROM airports WHERE City = "Anthony"
SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = 'Anthony'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = "USA"
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = "USA"
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = "ATO"
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT COUNT(*) FROM flights WHERE SourceAirport = "Aberdeen"
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = "Aberdeen")
SELECT COUNT(*) FROM flights JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = "Aberdeen") AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = "Ashley")
SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = "Jetblue Airways"
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines" AND flights.DestAirport = "ASY"
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD' AND T1.Airline = 'United Airlines';
SELECT COUNT(*) FROM flights WHERE Airline = "United Airlines" AND SourceAirport = "AHD"
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.Abbreviation WHERE T2.City = "Aberdeen" AND T3.Airline = "United Airlines"
SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE flights.DestAirport = 'AHD';
SELECT DISTINCT Airline FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200
SELECT airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200
SELECT FlightNo FROM flights WHERE Airline = "United Airlines"
SELECT FlightNo FROM flights WHERE Airline = "United Airlines"
SELECT FlightNo FROM flights WHERE SourceAirport = "APG"
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = "APG"
SELECT FlightNo FROM flights WHERE DestAirport = "APG"
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT FlightNo FROM flights WHERE DestAirport = "Aberdeen"
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode OR flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" OR airports.City = "Abilene"
SELECT Name FROM SHOP WHERE Shop_ID NOT IN (SELECT Shop_ID FROM HIRING)
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV"
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "PPT"))
SELECT Template_ID FROM Templates WHERE NOT EXISTS (SELECT * FROM Documents WHERE Templates.Template_ID = Documents.Template_ID)
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' UNION SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = "CV"
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY Template_Type_Code HAVING COUNT(T2.Template_ID) < 3
SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = "Data base")
SELECT Template_Type_Code FROM templates WHERE Template_ID = (SELECT Template_ID FROM documents WHERE Document_Name = 'Data base')
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_ID IS NOT NULL)
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Presentation")
SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation'
SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'
SELECT p.*  FROM paragraphs p  JOIN documents d ON p.document_id = d.document_id  WHERE p.paragraph_text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = "Customer reviews")
SELECT Paragraph_Text FROM paragraphs WHERE Document_ID = (SELECT Document_ID FROM documents WHERE Document_Name = 'Customer reviews')
SELECT Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND paragraph_text = 'Ireland'
SELECT Name FROM teacher WHERE Hometown <> "Little Lever Urban District"
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course_arrange.Course_ID = (SELECT Course_ID FROM course WHERE Course = 'math')
SELECT DISTINCT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'math'
SELECT COUNT(visit.visitor_ID) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age ASC
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT SUM(visit.Num_of_Ticket) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T1.winner_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.tourney_name = "Australian Open" ORDER BY T2.ranking_points DESC LIMIT 1
SELECT players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = "Australian Open"  GROUP BY matches.winner_id  ORDER BY matches.winner_rank_points DESC  LIMIT 1
SELECT COUNT(*) FROM matches AS t1 JOIN players AS t2 ON t1.winner_id = t2.player_id WHERE t2.hand = "left" AND t1.tourney_name = "WTA Championships"
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT D.note, D.killed, D.injured FROM death AS D JOIN ship AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig')
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM death WHERE note LIKE '%East%'
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE "%math%"
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT course_name, course_id FROM Courses  WHERE course_id IN (SELECT course_id FROM Sections  GROUP BY course_id  HAVING COUNT(section_id) < 2)
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2
SELECT first_name, middle_name, last_name FROM Students WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor')
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
SELECT phone_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  JOIN Addresses AS CurrentAddress ON Students.current_address_id = CurrentAddress.address_id  WHERE Addresses.line_1 <> CurrentAddress.line_1
SELECT * FROM transcripts WHERE transcript_date = (SELECT min(transcript_date) FROM transcripts)
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM sections WHERE section_name = "h"
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
SELECT * FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT COUNT(*) FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(DISTINCT TV_Channel.id) FROM TV_Channel WHERE TV_Channel.Language = "English"
SELECT COUNT(DISTINCT TV_Channel.id) FROM TV_Channel WHERE TV_Channel.Language = "English"
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!"
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle"
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT weekly_rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT series_name FROM TV_Channel WHERE Episode = "A Love of a Lifetime"
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT episode FROM TV_series WHERE TV_series_name = "Sky Radio"
SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = true
SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = true
SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> "English"
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT P.Name FROM PEOPLE AS P JOIN POKER_PLAYER AS PP ON P.People_ID = PP.People_ID WHERE PP.Earnings > 300000
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT Name FROM people WHERE Nationality <> "Russia"
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE governmentform = "Republic"
SELECT COUNT(*) FROM country WHERE governmentform = "Republic"
SELECT SUM(SurfaceArea) FROM country WHERE Region = "Caribbean"
SELECT SUM(surfaceArea) FROM country WHERE continent = "Caribbean"
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT continent FROM country WHERE name = "Anguilla"
SELECT region FROM country WHERE country.Code = city.CountryCode AND city.Name = 'Kabul'
SELECT region FROM country WHERE name = "Kabul"
SELECT language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil"
SELECT region, population FROM country WHERE name = "Angola"
SELECT region, population FROM country WHERE name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT AVG(lifeExpectancy) FROM country WHERE continent = 'Central Africa'
SELECT Name FROM country WHERE Continent = "Asia" ORDER BY LifeExpectancy ASC LIMIT 1
SELECT Name FROM country WHERE Continent = "Asia" ORDER BY LifeExpectancy ASC LIMIT 1
SELECT SUM(population) AS total_population, MAX(GNP) AS maximum_GNP FROM country WHERE continent = 'Asia'
SELECT SUM(Population) AS total_population, MAX(GNP) AS largest_GNP FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT sum(SurfaceArea) FROM country WHERE continent = "Asia" OR continent = "Europe"
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
SELECT SUM(city.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = "Gelderland"
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = "US territory"
SELECT AVG(country.GNP) AS mean_GNP, SUM(country.Population) AS total_population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Region = "US Territory"
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = "Africa"
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'
SELECT COUNT(DISTINCT continent) FROM country WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT Language FROM countrylanguage              JOIN country ON country.Code = countrylanguage.CountryCode              WHERE country.Continent = 'Asia'              GROUP BY Language              ORDER BY SUM(Percentage) DESC              LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(*) = 1
SELECT Language  FROM countrylanguage  WHERE CountryCode IN (     SELECT Code      FROM country      WHERE GovernmentForm = 'Republic' )  GROUP BY Language  HAVING COUNT(*) = 1
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" ORDER BY city.Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')
SELECT avg(LifeExpectancy) FROM country WHERE Language != "English" AND IsOfficial != "T"
SELECT AVG(lifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(country.Population) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != "English" AND countrylanguage.IsOfficial = "T"
SELECT SUM(T1.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != "English" AND T2.IsOfficial = "T"
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = "Beatrix") AND IsOfficial = true
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T'
SELECT COUNT(DISTINCT cl.language) FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE c.indepyear < 1930 AND cl.isofficial = true
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = "Europe")
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = "Europe")
SELECT Name FROM country WHERE Continent = "Africa" AND Population < ANY (SELECT Population FROM country WHERE Continent = "Asia")
SELECT Name FROM country WHERE Continent = "Asia" AND Population > (SELECT MIN(Population) FROM country WHERE Continent = "Africa")
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT Name  FROM country  WHERE Continent = 'Asia'  AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'T'
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial != 'T') AND Continent = 'Europe'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia' AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T'))
SELECT country.GovernmentForm, SUM(city.Population) AS total_population FROM country JOIN city ON country.Code = city.CountryCode GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72
SELECT country.Continent, SUM(city.Population) AS total_population, AVG(country.LifeExpectancy) AS average_life_expectancy FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM country WHERE Continent = "Asia"
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = "Europe" AND city.Population = 80000
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000
SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_surface_area FROM country WHERE Continent = "North America" AND SurfaceArea > 3000
SELECT * FROM city WHERE population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT COUNT(*) FROM countrylanguage WHERE Language = "Spanish" AND IsOfficial = "T"
SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T')
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)
SELECT MIN(grade) FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)
SELECT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = "Virginia"
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = "Virginia"
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT O.last_name FROM DOGS AS D JOIN OWNERS AS O ON D.owner_id = O.owner_id ORDER BY D.date_of_birth ASC LIMIT 1
SELECT COUNT(DISTINCT professional_id) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM PROFESSIONALS WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE NOT EXISTS (SELECT * FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT COUNT(*) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL
SELECT COUNT(*) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE NOT EXISTS (SELECT * FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship <> 'French'
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000
SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = "AirCon"
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [specified code]
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Highest = (SELECT MAX(stadium.Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (SELECT concert.Stadium_ID FROM concert WHERE concert.concert_ID = (SELECT singer_in_concert.concert_ID FROM singer_in_concert WHERE singer_in_concert.Singer_ID = (SELECT singer.Singer_ID FROM singer WHERE singer.Age = (SELECT MAX(singer.Age) FROM singer))))
SELECT concert_Name, Theme, COUNT(Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_Name, Theme
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT weight FROM pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1
SELECT weight FROM pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT COUNT(*) FROM continents
SELECT COUNT(*) FROM continents
SELECT COUNT(*) FROM countries
SELECT COUNT(*) FROM countries
SELECT Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY Horsepower ASC LIMIT 1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.Horsepower ASC LIMIT 1
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_car_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year
SELECT Model FROM car_names  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  ORDER BY cars_data.MPG DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT COUNT(DISTINCT Airline) FROM airlines
SELECT COUNT(DISTINCT Airline) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee
SELECT Name FROM employee ORDER BY Age ASC
SELECT Name FROM employee ORDER BY Age ASC
SELECT shop.Manager_name, shop.District  FROM shop  WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT MIN(Version_Number), Template_Type_Code FROM Templates
SELECT Version_Number, Template_Type_Code FROM Templates ORDER BY Version_Number ASC LIMIT 1
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))
SELECT COUNT(*) FROM paragraphs
SELECT COUNT(*) FROM paragraphs
SELECT COUNT(*) FROM teacher
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age, Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(rankings.ranking) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id
SELECT AVG(rankings.ranking) FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON players.player_id = rankings.player_id
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT CONCAT(players.first_name, ' ', players.last_name) AS full_name FROM players ORDER BY players.birth_date
SELECT winner_name, loser_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  LIMIT 3
SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  LIMIT 3
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT name, date, result FROM battle
SELECT battle.id, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id
SELECT AVG(injured) FROM death
SELECT COUNT(DISTINCT result) FROM battle
SELECT line_1, line_2 FROM addresses
SELECT line_1, line_2 FROM addresses
SELECT COUNT(*) FROM courses
SELECT COUNT(*) FROM courses
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
SELECT section_name, section_description FROM sections
SELECT section_name, section_description FROM sections
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT DISTINCT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM students ORDER BY date_left ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SELECT AVG(transcript_date) FROM transcripts
SELECT AVG(transcript_date) FROM transcripts
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT COUNT(*) FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT transcript_date, transcript_id  FROM transcripts  GROUP BY transcript_date, transcript_id  ORDER BY count(*) ASC  LIMIT 1
SELECT transcript_date, transcript_id FROM transcripts ORDER BY (SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents.transcript_id = transcripts.transcript_id) ASC LIMIT 1
SELECT COUNT(DISTINCT current_address_id) FROM students
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT permanent_address_id FROM students UNION SELECT current_address_id FROM students)
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC
SELECT * FROM students ORDER BY last_name DESC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT Production_code, Channel  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  ORDER BY Original_air_date DESC  LIMIT 1
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT birth_date FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY earnings ASC LIMIT 1
SELECT birth_date FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY earnings ASC LIMIT 1
SELECT poker_player.Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT Money_Rank FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Height DESC LIMIT 1
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT MAX(area_code), MIN(area_code) FROM area_code_state
SELECT DISTINCT state, created FROM votes
SELECT contestant_number, contestant_name  FROM contestants  WHERE contestant_number = (     SELECT contestant_number      FROM votes      GROUP BY contestant_number      ORDER BY count(*) ASC      LIMIT 1 )
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT country.Name FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC  LIMIT 1
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  ORDER BY country.Population ASC  LIMIT 1
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState  FROM country  WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, country.Population, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT COUNT(*) FROM conductor
SELECT COUNT(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) FROM show
SELECT MAX(share) AS maximum_share, MIN(share) AS minimum_share  FROM performance  WHERE type <> 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Age DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) ASC
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend               GROUP BY student_id               ORDER BY count(*) DESC               LIMIT 1)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT treatment_type_description FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1)
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Breeds.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) ASC LIMIT 1)
SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) ASC LIMIT 1)
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs))
SELECT date_arrived, date_departed FROM dogs
SELECT date_arrived, date_departed FROM dogs
SELECT COUNT(DISTINCT dog_id) FROM treatments
SELECT COUNT(DISTINCT dog_id) FROM treatments
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT AVG(age) FROM dogs
SELECT AVG(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT charge_type, charge_amount FROM charges
SELECT MAX(charge_amount) FROM charges
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM professionals
SELECT email_address, cell_number, home_phone FROM professionals
SELECT DISTINCT breed_name, size_description FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT COUNT(*) FROM Other_Available_Features