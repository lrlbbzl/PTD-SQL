[{"p_str": "SELECT Name ,  Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT Name ,  Song_release_year FROM singer WHERE Age  = (SELECT MIN(Age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT max(Capacity) ,  avg(Capacity) FROM stadium", "g_str": ["select max(capacity), average from stadium", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT AVG(Average) ,  MAX(Highest) FROM stadium", "g_str": ["select avg(capacity) ,  max(capacity) from stadium", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT T1.Stadium_ID ,  count(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID", "g_str": ["SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT Name FROM stadium LEFT JOIN concert ON Stadium_ID  =  Stadium_ID WHERE Stadium_ID  IS NULL", "g_str": ["SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT Country FROM singer WHERE Age >40 UNION SELECT DISTINCT Country FROM singer WHERE Age <30", "g_str": ["SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  !=  2014", "g_str": ["SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID WHERE T3.Year  =  2014", "g_str": ["SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "concert_singer"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT Name ,  Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year  =  2014 OR Year  =  2015)", "g_str": ["SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "concert_singer"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT T2.PetID) FROM Pets AS T1 JOIN Has_Pet AS T3 ON T1.PetID  =  T3.PetID JOIN Student AS T4 ON T3.StuID  =  T4.StuID WHERE T4.Age  >  20", "g_str": ["SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT count(PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T2.StuID  =  T3.StuID WHERE PetType  =  'dog' AND Sex  =  'F'", "g_str": ["SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pets_1"], "hardness": "hard"}, {"p_str": "SELECT count(PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T2.StuID  =  T3.StuID WHERE PetType  =  'dog' AND Sex  =  'female'", "g_str": ["SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pets_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T2.StuID FROM Has_Pet AS T3 JOIN Pets AS T4 ON T3.PetID  =  T4.PetID WHERE T4.PetType  =  'cat')", "g_str": ["SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "pets_1"], "hardness": "hard"}, {"p_str": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' AND T3.PetType  !=  'cat'", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.FullName, T1.Id, COUNT(T2.Model) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId GROUP BY T1.Id", "g_str": ["SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Horsepower  = (SELECT min(Horsepower) FROM cars_data)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Horsepower  = (SELECT min(Horsepower) FROM cars_data)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T3.Year  =  1970", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.FullName FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id  =  T2.Id JOIN model_list AS T3 ON T1.Id  =  T3.Maker JOIN car_names AS T4 ON T3.Model  =  T4.Model WHERE T2.Year  =  1970", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T4.Maker ,  T1.Year FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T1.Year  =   (SELECT min(Year) FROM cars_data)", "g_str": ["SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.Model  =  T2.Id WHERE T2.Year  >  1980", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT count(T2.Model) ,  T1.FullName FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.Make GROUP BY T1.FullName", "g_str": ["select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(T2.Model) ,  T1.Id ,  T1.FullName FROM car_makers AS T1 JOIN car_names AS T3 ON T1.Id  =  T3.Make JOIN model_list AS T4 ON T1.Id  =  T4.Maker GROUP BY T1.Id", "g_str": ["SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T2.Make  =  'amc' AND T3.Model  =  'hornet sportabout'", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'AMC Hornet Sportabout (SW)'", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT T1.Model) FROM car_names AS T1 JOIN countries AS T2 ON T1.MakeId  =  T2.CountryId WHERE T2.CountryName  =  'usa'", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT T1.Model) FROM car_names AS T1 JOIN car_makers AS T2 ON T1.MakeId  =  T2.Id JOIN countries AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'United States'", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Maker ,  T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Maker ,  T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*)  >=  3", "g_str": ["SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryName FROM countries WHERE Continent  =  (SELECT ContId FROM continents WHERE Continent  =  'Europe') GROUP BY CountryId HAVING COUNT(*)  >=  3", "g_str": ["SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT max(T1.Horsepower) ,  T4.Maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T1.Cylinders  =  3", "g_str": ["SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.MPG  = (SELECT max(MPG) FROM cars_data)", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT avg(Edispl) FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Id  =  T2.Id JOIN model_list AS T3 ON T2.Id  =  T3.Maker JOIN car_names AS T4 ON T3.Model  =  T4.Model WHERE T2.Id  =  'Volvo'", "g_str": ["SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT max(Accelerate) FROM cars_data GROUP BY Cylinders", "g_str": ["SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.ModelId GROUP BY T1.Model ORDER BY count(T1.Make) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.ModelId GROUP BY T1.Make ORDER BY count(T1.Model) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Maker ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T2.Maker HAVING count(*)  >  3", "g_str": ["SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T3 ON T2.Model  =  T3.Model JOIN cars_data AS T4 ON T3.MakeId  =  T4.Id WHERE T1.FullName  = 'General Motors' AND T4.Weight  >  3500", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T4 ON T2.Model  =  T4.Model JOIN cars_data AS T5 ON T4.MakeId  =  T5.Id WHERE (T1.Maker  =  'General Motors' OR T5.Weight  >  3500)", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000", "g_str": ["select distinct year from cars_data where weight between 3000 and 4000;", "car_1"], "hardness": "easy"}, {"p_str": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' AND T1.Accelerate  =   (SELECT min(Accelerate) FROM cars_data)", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT min(Accelerate) FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Id  =  T2.Id JOIN car_names AS T3 ON T1.MakeId  =  T3.MakeId JOIN model_list AS T4 ON T3.Model  =  T4.Model WHERE T2.Id  =  'volvo'", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT count(T1.Id) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Accelerate  >  (SELECT max(Accelerate) FROM cars_data)", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT count(T1.Id) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Accelerate  >  (SELECT max(Accelerate) FROM cars_data)", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country HAVING count(*)  >  2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE (SELECT count(*) FROM car_makers AS T3 WHERE T3.Country  =  T1.CountryId)  >  2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T2.MakeId ,  T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) AND T1.Cylinders  <=  3", "g_str": ["SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.MakeId ,  T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  <  4 AND T2.Horsepower  >  (SELECT min(Horsepower) FROM cars_data)", "g_str": ["select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.Model JOIN car_makers AS T4 ON T3.Maker  =  T4.Id WHERE T1.Weight  <  3500 AND T4.FullName  !=  'Ford Motor Company'", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN car_makers AS T3 ON T1.Make  =  T3.Id WHERE T2.Weight  <  3500 AND T3.Maker  !=  'Ford'", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Id ,  Maker FROM car_makers WHERE Maker IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(*) > 3)", "g_str": ["select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM (SELECT Maker, COUNT(Model) AS ModelCount FROM model_list GROUP BY Maker) AS T1 WHERE ModelCount >= 2) AND Id IN (SELECT MakeId FROM (SELECT MakeId, COUNT(Id) AS CarCount FROM car_names GROUP BY MakeId) AS T2 WHERE CarCount > 3)", "g_str": ["SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryId ,  CountryName FROM countries WHERE Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*)  >  3) OR Country IN (SELECT Maker FROM model_list WHERE Model  =  'fiat')", "g_str": ["SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT CountryId FROM car_makers GROUP BY CountryId HAVING COUNT(*) > 3) OR CountryId IN (SELECT CountryId FROM car_makers WHERE Maker IN (SELECT Maker FROM model_list WHERE Maker = 'Fiat'))", "g_str": ["select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT T1.uid) FROM airlines AS T1 JOIN airports AS T2 ON T2.Country  =  'USA'", "g_str": ["SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT count(FlightNo) FROM flights WHERE Airline  =  'JetBlue Airways'", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM flights WHERE Airline  =  'JetBlue'", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T2.Airline ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T2.Airline ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Abbreviation ,  Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.uid ORDER BY count(*) LIMIT 1", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT T1.Abbreviation ,  T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.uid ORDER BY count(*) LIMIT 1", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT FlightNo FROM flights WHERE Airline  =  'United Airlines'", "g_str": ["SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT * FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID HAVING count(*)  = (SELECT max(count(*)) FROM evaluation GROUP BY Employee_ID)", "g_str": ["SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "employee_hire_evaluation"], "hardness": "extra"}, {"p_str": "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING count(T2.Employee_ID)  = (SELECT max(count(T3.Employee_ID)) FROM hiring AS T3 GROUP BY T3.Shop_ID)", "g_str": ["SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "employee_hire_evaluation"], "hardness": "extra"}, {"p_str": "SELECT Name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE Shop_ID  = Shop_ID)", "g_str": ["SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "employee_hire_evaluation"], "hardness": "hard"}, {"p_str": "SELECT Name FROM shop LEFT JOIN hiring ON Shop_ID  =  Shop_ID WHERE Employee_ID  IS NULL", "g_str": ["SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "employee_hire_evaluation"], "hardness": "hard"}, {"p_str": "SELECT T1.Document_ID ,  T1.Template_ID ,  T2.Template_Details FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_Name  =  'Robbin CV'", "g_str": ["SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT Documents.Document_ID, Templates.Template_ID, Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID  =  Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code  =  Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name  =  'Robbin CV'", "g_str": ["SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT Template_ID) FROM Templates", "g_str": ["SELECT count(DISTINCT template_id) FROM Documents", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT count(DISTINCT Template_ID) FROM Templates", "g_str": ["SELECT count(DISTINCT template_id) FROM Documents", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT Template_ID ,  Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Template_ID ,  Template_Type_Code ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "extra"}, {"p_str": "SELECT T1.Template_ID ,  T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID ,  T1.Template_Type_Code HAVING count(*)  = (SELECT max(count(*)) FROM Templates AS T3 JOIN Documents AS T4 ON T3.Template_ID  =  T4.Template_ID GROUP BY T3.Template_ID ,  T3.Template_Type_Code)", "g_str": ["SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "extra"}, {"p_str": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING count(*)  = (SELECT max(count(*)) FROM Templates GROUP BY Template_Type_Code)", "g_str": ["SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT min(Version_Number) ,  Template_Type_Code FROM Templates GROUP BY Template_Type_Code", "g_str": ["SELECT min(Version_Number) ,  template_type_code FROM Templates", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT min(Version_Number) ,  Template_Type_Code FROM Templates GROUP BY Template_Type_Code", "g_str": ["SELECT min(Version_Number) ,  template_type_code FROM Templates", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT T1.Template_Type_Code ,  count(T2.Document_ID) FROM Ref_Template_Types AS T1 JOIN Documents AS T2 ON T1.Template_Type_Code  =  T2.Template_ID GROUP BY T1.Template_Type_Code", "g_str": ["SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code GROUP BY T2.Template_Type_Code HAVING count(*)  = (SELECT max(count(*)) FROM Templates AS T4 JOIN Documents AS T5 ON T4.Template_Type_Code  =  T5.Template_Type_Code GROUP BY T4.Template_Type_Code)", "g_str": ["SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)", "g_str": ["SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)", "g_str": ["SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Template_Type_Code  =  Template_Type_Code WHERE Template_Type_Description  =  'Book'", "g_str": ["SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT T2.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID  =  T3.Template_ID", "g_str": ["SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT T2.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID  =  T3.Template_ID", "g_str": ["SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text  =  'Korea '", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID ,  T1.Document_Name HAVING count(*)  = (SELECT max(count(*)) FROM Paragraphs GROUP BY Document_ID)", "g_str": ["SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "extra"}, {"p_str": "SELECT Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID  =  Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID ORDER BY count(*) ASC LIMIT 1", "g_str": ["SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID ORDER BY count(*) ASC LIMIT 1", "g_str": ["SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T2.Document_ID HAVING count(*)  =  1 AND count(*)  =  2", "g_str": ["SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  >=  1 AND count(*)  <=  2", "g_str": ["SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "cre_Doc_Template_Mgt"], "hardness": "easy"}, {"p_str": "SELECT T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.Level_of_membership  >  4 ORDER BY T1.Age DESC", "g_str": ["SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "museum_visit"], "hardness": "medium"}, {"p_str": "SELECT Name FROM museum WHERE Num_of_Staff  >  (SELECT min(Num_of_Staff) FROM museum) AND Open_Year  >  2010", "g_str": ["SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "museum_visit"], "hardness": "hard"}, {"p_str": "SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T2.Total_spent  =  (SELECT max(Total_spent) FROM visit)", "g_str": ["SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID ,  T1.Name HAVING count(T2.visitor_ID)  = (SELECT max(T3.count) FROM (SELECT count(visitor_ID) as count FROM visit GROUP BY Museum_ID) as T3)", "g_str": ["SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT Name FROM museum LEFT JOIN visit ON Museum_ID = Museum_ID WHERE visitor_ID IS NULL LIMIT 1", "g_str": ["SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "museum_visit"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT T1.ID) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID LEFT JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  <=  2010 GROUP BY T2.visitor_ID HAVING count(T2.visitor_ID)  =  0", "g_str": ["SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT avg(T1.winner_age) ,  avg(T1.loser_age) FROM (SELECT (YEAR(CURRENT_DATE) - YEAR(T2.birth_date)) AS winner_age , (YEAR(CURRENT_DATE) - YEAR(T3.birth_date)) AS loser_age FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id JOIN players AS T3 ON T1.loser_id  =  T3.player_id) AS T4", "g_str": ["SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT avg(2019 - year(birth_date)) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches)", "g_str": ["SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT avg(rank) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id", "g_str": ["SELECT avg(winner_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT avg(ranking) FROM rankings AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id", "g_str": ["SELECT avg(winner_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT max(loser_rank) FROM matches", "g_str": ["SELECT min(loser_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT min(rank) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id", "g_str": ["SELECT min(loser_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT count(DISTINCT T2.last_name) FROM players AS T1 JOIN matches AS T3 ON T1.player_id  =  T3.loser_id WHERE T3.loser_id  =  T1.player_id", "g_str": ["SELECT count(DISTINCT loser_name) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 AND T2.year  =  2016", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 AND T2.year  =  2016", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT country_code ,  first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_id IN (SELECT tourney_id FROM matches WHERE tourney_name  =  'WTA Championships') AND tourney_id IN (SELECT tourney_id FROM matches WHERE tourney_name  =  'Australian Open'))", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "wta_1"], "hardness": "extra"}, {"p_str": "SELECT CONCAT(first_name,' ',last_name) as full_name FROM players ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name || ' ' || last_name as full_name FROM players WHERE hand  =  'left' ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name ,  country_code FROM players WHERE tours  =  (SELECT max(tours) FROM rankings)", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name ,  sum(T3.ranking_points) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T2.winner_id ORDER BY sum(T3.ranking_points) DESC LIMIT 1", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name ,  sum(T3.ranking_points) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id GROUP BY T2.winner_id ORDER BY count(T2.match_num) DESC LIMIT 1", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T3.tourney_name  =  'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1", "g_str": ["SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T3.tourney_name  =  'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1", "g_str": ["SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches) UNION SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches)", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches) UNION SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches)", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT sum(T2.ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id", "g_str": ["SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.last_name ,  T2.rank FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.rank  <=  3 ORDER BY T1.birth_date DESC LIMIT 3", "g_str": ["SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.last_name ,  T2.rank FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T1.birth_date ASC LIMIT 3", "g_str": ["SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT count(T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.winner_hand  =  'left' AND T1.tourney_name  =  'WTA Championships'", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.ranking_points  = (SELECT max(ranking_points) FROM rankings)", "g_str": ["SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.ranking_points  = (SELECT max(ranking_points) FROM rankings)", "g_str": ["SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT name ,  date ,  result FROM battle", "g_str": ["SELECT name ,  date FROM battle", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT T1.date ,  max(T2.killed) as max_kill ,  min(T2.killed) as min_kill FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.date", "g_str": ["SELECT max(killed) ,  min(killed) FROM death", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id JOIN ship AS T3 ON T1.id  =  T3.lost_in_battle GROUP BY T2.caused_by_ship_id HAVING sum(T2.killed)  >  10", "g_str": ["SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "battle_death"], "hardness": "hard"}, {"p_str": "SELECT T1.id ,  T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY sum(T2.injured) DESC LIMIT 1", "g_str": ["SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' AND T2.disposition_of_ship  =  'lost' AND T3.name  =  'HMS Atalanta' AND T3.disposition_of_ship  =  'lost'", "g_str": ["SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 LEFT JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  !=  'English Channel'", "g_str": ["SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT degree_program_id) FROM Degree_Programs", "g_str": ["SELECT count(DISTINCT department_id) FROM Degree_Programs", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT count(DISTINCT degree_program_id) FROM Degree_Programs", "g_str": ["SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT T2.course_name ,  T2.course_id FROM SECTION AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "g_str": ["SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.course_id ,  T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2", "g_str": ["SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, T1.student_id, T2.semester_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Semesters AS T3 ON T2.semester_id  =  T3.semester_id GROUP BY T2.semester_id ORDER BY count(T2.student_id) DESC LIMIT 1", "g_str": ["SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id  =  2 AND T2.semester_id  =  1 GROUP BY T1.student_id", "g_str": ["SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE (SELECT count(*) FROM Student_Enrolment AS T3 WHERE T3.student_id  =  T1.student_id AND T3.semester_id  =  1)  =  2 GROUP BY T1.student_id", "g_str": ["SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  = 'Bachelor'", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Degree_Programs AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_summary_name  =  'Bachelors'", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id HAVING count(*)  = (SELECT max(count(*)) FROM Student_Enrolment GROUP BY degree_program_id)", "g_str": ["SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T2.student_enrolment_id) as enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id , count(T2.student_enrolment_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(T2.student_enrolment_id) DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "g_str": ["SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT transcript_date ,  transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id, COUNT(*) FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT transcript_date ,  transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id, COUNT(*) FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT first_name FROM Students WHERE permanent_address_id  !=  current_address_id LIMIT 1", "g_str": ["SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3, T2.city, T2.zip_postcode, T2.state_province_county, T2.country, T2.other_address_details FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id GROUP BY T1.current_address_id ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 ,  T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT T2.transcript_id) ,  T1.student_course_id FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T1.student_course_id", "g_str": ["SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT count(DISTINCT T1.student_course_id) as count, T2.student_enrolment_id FROM Student_Enrolment_Courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id ORDER BY count DESC LIMIT 1", "g_str": ["SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT transcript_date ,  transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE student_id LIKE '%Master%') AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE student_id LIKE '%Bachelor%')", "g_str": ["SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Masters') AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  'Bachelors')", "g_str": ["SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT * FROM Addresses WHERE address_id  IN (SELECT current_address_id FROM Students) OR address_id  IN (SELECT permanent_address_id FROM Students)", "g_str": ["SELECT count(DISTINCT current_address_id) FROM Students", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Students ORDER BY last_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Students ORDER BY last_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT section_name ,  section_description FROM Sections WHERE section_id  =  'h'", "g_str": ["SELECT section_description FROM Sections WHERE section_name  =  'h'", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.Channel  =  T2.Channel WHERE T2.Air_Date  =  T1.Original_air_date ORDER BY T2.Air_Date ASC", "g_str": ["SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Title, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "g_str": ["SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Air_Date FROM TV_series WHERE Title  =  'A Love of a Lifetime'", "g_str": ["SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT Weekly_Rank FROM TV_series WHERE Title  =  'A Love of a Lifetime'", "g_str": ["SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  = 'A Love of a Lifetime'", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Episode FROM TV_series WHERE series_name  =  'Sky Radio'", "g_str": ["SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Package_Option ,  series_name FROM TV_Channel WHERE Hight_definition_TV  =  True", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Package_Option ,  series_name FROM TV_Channel WHERE Hight_definition_TV  =  True", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Written_by  =  'Todd Casey')", "g_str": ["SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  !=  'Todd Casey' OR T2.Written_by  IS NULL", "g_str": ["SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones' OR T2.Directed_by  =  'Michael Chang'", "g_str": ["SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "tvshow"], "hardness": "extra"}, {"p_str": "SELECT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel JOIN TV_series AS T3 ON T1.id  =  T3.Channel WHERE T2.Directed_by  =  'Ben Jones' OR T2.Directed_by  =  'Michael Chang'", "g_str": ["SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "tvshow"], "hardness": "extra"}, {"p_str": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*)  >  2)", "g_str": ["SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT Channel FROM TV_series GROUP BY Channel HAVING COUNT(*)  >  2", "g_str": ["SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by  =  'Ben Jones')", "g_str": ["SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by  =  'Ben Jones')", "g_str": ["SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by  =  'Ben Jones')", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT T2.Name ,  T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC", "g_str": ["SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "poker_player"], "hardness": "easy"}, {"p_str": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE", "g_str": ["SELECT count(*) FROM area_code_state", "voter_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT T2.state ,  T1.created FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state  =  T2.state", "g_str": ["SELECT DISTINCT state ,  created FROM votes", "voter_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state  =  T2.state WHERE T1.state  =  'NY' OR T1.state  =  'CA'", "g_str": ["SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "voter_1"], "hardness": "medium"}, {"p_str": "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state GROUP BY T2.state HAVING count(*)  = (SELECT max(count(*)) FROM VOTES GROUP BY state)", "g_str": ["SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "voter_1"], "hardness": "extra"}, {"p_str": "SELECT T1.created ,  T2.state ,  T1.phone_number FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T1.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Tabatha Gehling'", "g_str": ["SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "voter_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T2.contestant_name  =  'Tabatha Gehling' AND T1.contestant_number IN ( SELECT T3.contestant_number FROM CONTESTANTS AS T3 WHERE T3.contestant_name  =  'Kelly Clauss' )", "g_str": ["SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "voter_1"], "hardness": "extra"}, {"p_str": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Caribbean'", "g_str": ["SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Central Africa'", "g_str": ["SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT count(T1.ID) ,  max(T1.GNP) FROM country AS T1 WHERE T1.Continent  =  'Asia'", "g_str": ["SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT count(ID) FROM city WHERE District  =  'Gelderland'", "g_str": ["SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT AVG (GNP) ,  SUM (Population) FROM country WHERE Continent  =  'North America'", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent HAVING count(DISTINCT T2.Language)  >  (SELECT count(DISTINCT Language) FROM countrylanguage) ORDER BY count(DISTINCT T2.Language) DESC LIMIT 1", "g_str": ["SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 WHERE T1.Language  =  'English' INTERSECT SELECT COUNT(DISTINCT T2.CountryCode) FROM countrylanguage AS T2 WHERE T2.Language  =  'Dutch'", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'Dutch'", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.Language  =  'French'", "g_str": ["SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language  =  'English') UNION SELECT DISTINCT Name FROM country WHERE Code IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language  =  'Dutch')", "g_str": ["SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage JOIN country ON CountryCode  =  Code WHERE Continent  =  'Asia' ORDER BY Percentage DESC LIMIT 1", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE Language NOT IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING count(*) > 1) AND CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic')", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM city JOIN countrylanguage ON city.CountryCode  =  countrylanguage.CountryCode WHERE Population  =  (SELECT max(Population) FROM city) AND Language  =  'English'", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name ,  Population ,  LifeExpectancy FROM country JOIN countrylanguage ON Code  =  CountryCode WHERE Language  =  'Asian' ORDER BY Population DESC LIMIT 1", "g_str": ["SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT avg(LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' OR T2.IsOfficial  !=  'false'", "g_str": ["SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT avg(LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' OR T2.IsOfficial  !=  'false'", "g_str": ["SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT sum(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT sum(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.IndepYear  <  1930", "g_str": ["SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE Continent  =  'Africa' AND Population  <  (SELECT max(Population) FROM country WHERE Continent  =  'Asia')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name FROM country WHERE Continent  =  'Asia' AND Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Africa')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T2.IsOfficial  =  'F'", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T2.IsOfficial  =  0", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T1.GovernmentForm  !=  'Republic'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  !=  'English' AND T1.GovernmentForm  !=  'Republic'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent  =  'Europe') AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English' AND IsOfficial  =  'F')", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent  =  'Europe') AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English' AND IsOfficial  =  'T')", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE Percentage  = (SELECT max(Percentage) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Population  >  (SELECT max(Population) FROM country)) GROUP BY CountryCode", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Code,  T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T2.CountryCode HAVING T2.Percentage  =  100", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT T1.Name) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.Percentage  =  (SELECT max(Percentage) FROM countrylanguage WHERE Language  =  'Spanish')", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.IsOfficial  =  'True'", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' ORDER BY T2.Percentage DESC LIMIT 1", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.IsOfficial  =  'T'", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Major_Record_Format, COUNT(Major_Record_Format) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC", "g_str": ["SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC", "g_str": ["SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID JOIN performance AS T3 ON T1.Orchestra_ID  =  T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID  =  T4.Performance_ID WHERE T1.Year_of_Founded  <  2003 OR T1.Year_of_Founded  >  2003", "g_str": ["SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "orchestra"], "hardness": "hard"}, {"p_str": "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING count(*)  >  1", "g_str": ["SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT T1.name ,  count(DISTINCT T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID", "g_str": ["SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id OR T1.ID  =  T2.friend_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "network_1"], "hardness": "extra"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id OR T1.ID  =  T2.friend_id GROUP BY T1.ID HAVING count(*)  >=  3", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "network_1"], "hardness": "medium"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  'Kyle'", "g_str": ["SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "network_1"], "hardness": "hard"}, {"p_str": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)", "g_str": ["SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Likes AS T3 ON T1.ID  =  T3.student_id WHERE T2.friend_id  =  T3.liked_id", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Likes AS T3 ON T1.ID  =  T3.student_id WHERE T2.friend_id  =  T3.liked_id", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.name FROM Highschooler AS T1 WHERE T1.ID  IN (SELECT T2.student_id FROM Friend AS T2 WHERE T2.friend_id  IN (SELECT T3.student_id FROM Likes AS T3 WHERE T3.liked_id  =  T1.ID))", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID  IN (SELECT T2.student_id FROM Friend AS T2 WHERE T2.friend_id  IN (SELECT T3.student_id FROM Likes AS T3 WHERE T3.liked_id  =  T1.ID))", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT avg(T1.grade) FROM Highschooler AS T1 WHERE T1.ID  IN (SELECT DISTINCT T2.friend_id FROM Friend AS T2 WHERE T2.student_id  IN (SELECT DISTINCT T3.ID FROM Highschooler AS T3))", "g_str": ["SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "hard"}, {"p_str": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)", "g_str": ["SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "hard"}, {"p_str": "SELECT min(grade) FROM Highschooler WHERE ID  NOT IN (SELECT friend_id FROM Friend UNION SELECT student_id FROM Friend)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.state  =  'Indiana' OR (SELECT count(*) FROM Treatments WHERE professional_id  =  T1.professional_id)  >  2", "g_str": ["SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.state  =  'Indiana' OR (SELECT count(*) FROM Treatments AS T3 WHERE T3.professional_id  =  T1.professional_id)  >  2", "g_str": ["SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.cost_of_treatment  <=  1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id JOIN Owners AS T3 ON T1.owner_id  =  T3.owner_id GROUP BY T1.dog_id HAVING sum(T2.cost_of_treatment)  <=  1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT first_name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT first_name FROM Dogs)", "g_str": ["SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs)", "g_str": ["SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name HAVING count(T2.dog_id)  = (SELECT max(count(T3.dog_id)) FROM Owners AS T4 JOIN Dogs AS T3 ON T4.owner_id  =  T3.owner_id)", "g_str": ["SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T3.owner_id ,  T3.last_name FROM Owners AS T3 JOIN (SELECT T2.owner_id , sum(T1.cost_of_treatment) AS total_cost FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY T2.owner_id) AS T4 ON T3.owner_id  =  T4.owner_id ORDER BY T4.total_cost DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.owner_id ,  T1.last_name ,  sum(T3.cost_of_treatment) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T2.treatment_type_code HAVING sum(T2.cost_of_treatment)  = (SELECT min(sum(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code)", "g_str": ["SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.owner_id, T1.zip_code, sum(T3.cost_of_treatment) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id  =  T2.dog_id JOIN Dogs AS T3 ON T1.owner_id  =  T3.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)", "g_str": ["SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments)", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT first_name ,  last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments))", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.first_name ,  T1.last_name ,  T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.name ,  T3.date_of_treatment FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code  =  T2.breed_code JOIN Treatments AS T3 ON T1.dog_id  =  T3.dog_id WHERE T1.breed_code  = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1)", "g_str": ["SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id JOIN Breeds AS T3 ON T1.breed_code  =  T3.breed_code WHERE T1.breed_code  = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1)", "g_str": ["SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T2.first_name ,  T1.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state  = 'Virginia'", "g_str": ["SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "g_str": ["SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "g_str": ["SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T2.age ORDER BY T2.age ASC LIMIT 1", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  = (SELECT min(age) FROM Dogs)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT T1.email_address FROM Professionals AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state  =  'Hawaii' OR T2.state  =  'Wisconsin'", "g_str": ["SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT max(cost_of_treatment) FROM Treatments", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT max(cost_of_treatment) FROM Treatments", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT count(DISTINCT T1.owner_id) FROM Owners AS T1 WHERE NOT EXISTS (SELECT 1 FROM Dogs AS T2 WHERE T2.owner_id  =  T1.owner_id AND T2.abandoned_yn  =  'no')", "g_str": ["SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT max(charge_amount) FROM Charges WHERE charge_type  =  'expensive'", "g_str": ["SELECT max(charge_amount) FROM Charges", "dog_kennels"], "hardness": "easy"}, {"p_str": "SELECT T1.breed_name ,  T2.size_description FROM Breeds AS T1 CROSS JOIN Sizes AS T2", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT T1.breed_name ,  T2.size_description FROM Breeds AS T1 JOIN Dogs AS T3 ON T1.breed_code  =  T3.breed_code JOIN Sizes AS T2 ON T3.size_code  =  T2.size_code", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT T1.first_name ,  T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 AND Birth_Year  >  1955", "g_str": ["SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "singer"], "hardness": "hard"}, {"p_str": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 AND Birth_Year  >  1955 GROUP BY Citizenship", "g_str": ["SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "singer"], "hardness": "hard"}, {"p_str": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code", "g_str": ["SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "real_estate_properties"], "hardness": "medium"}, {"p_str": "SELECT property_name FROM Properties WHERE (property_type_code  =  'H' OR property_type_code  =  'A') AND room_count  >  1", "g_str": ["SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "real_estate_properties"], "hardness": "hard"}]