[{"p_str": "SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age = (SELECT min(Age) FROM singer)", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IN (SELECT T3.petid FROM pets WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog')", "g_str": ["SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Fname ,  T1.Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "g_str": ["SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;", "g_str": ["SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = \"Smith\"", "g_str": ["SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT T2.Maker FROM car_names AS T1 JOIN car_makers AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Year  =  '1970'", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT MakeId FROM cars_data WHERE Year = 1970)", "g_str": ["SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT ml.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model ORDER BY cd.Year ASC LIMIT 1", "g_str": ["SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T3.Model = 'Hornet Sportabout' AND T3.Maker = (SELECT Id FROM car_makers WHERE FullName = 'AMC')", "g_str": ["SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM car_makers WHERE country  =  \"France\"", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM car_makers WHERE Country = 'France'", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM countries AS T1 JOIN model_list AS T2 ON T1.CountryId  =  T2.Maker WHERE T1.CountryName  =  \"USA\"", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT COUNT(t2.model) FROM model_list AS t2 JOIN car_makers AS t1 ON t1.id  =  t2.maker WHERE t1.country  =  \"United States\"", "g_str": ["SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "car_1"], "hardness": "hard"}, {"p_str": "SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders = 8 AND Year = 1974", "g_str": ["select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "car_1"], "hardness": "medium"}, {"p_str": "SELECT min(T2.Weight) FROM cars_data AS T1 JOIN car_names AS T3 JOIN model_list AS T4 ON T1.Id  =  T3.MakeId AND T4.Maker  =  T3.Make AND T4.Model  =  T3.Model WHERE T1.Cylinders  =  \"8\" AND T1.Year  =  \"1974\"", "g_str": ["select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T2.Make ,  max(T3.Horsepower) FROM car_names AS T1 JOIN car_makers AS T2 JOIN cars_data AS T3 ON T1.MakeId  =  T2.Id AND T1.MakeId  =  T3.Id WHERE T1.Cylinders  =  3", "g_str": ["SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 ORDER BY cars_data.Horsepower DESC LIMIT 1", "g_str": ["SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT avg(T2.Horsepower) FROM cars_data AS T2 JOIN car_names AS T1 ON T2.Id  =  T1.MakeId WHERE T1.Year  <  1980", "g_str": ["SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "car_1"], "hardness": "easy"}, {"p_str": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make  =  \"Volvo\")", "g_str": ["SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM model_list WHERE Maker = 'American Motor Company'", "g_str": ["SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "car_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE (T4.FullName = \"General Motors\" OR T1.Weight > 3500)", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000", "g_str": ["select distinct year from cars_data where weight between 3000 and 4000;", "car_1"], "hardness": "easy"}, {"p_str": "SELECT MIN(cars_data.Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo')", "g_str": ["SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data)", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)", "g_str": ["SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "car_1"], "hardness": "hard"}, {"p_str": "SELECT MakeId, Make FROM car_names WHERE Id IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)", "g_str": ["SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT MakeId, Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data)) AND Cylinders < 4", "g_str": ["select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T1.Weight < 3500 AND T2.Maker != \"Ford Motor Company\"", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T3 ON T1.Id  =  T3.MakeId JOIN model_list AS T2 ON T3.Model  =  T2.Model WHERE T1.Weight  <  3500 AND T2.Maker  !=  'Ford Motor Company'", "g_str": ["SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT * FROM airlines WHERE Abbreviation = 'UAL'", "g_str": ["SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "flight_2"], "hardness": "easy"}, {"p_str": "SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'", "g_str": ["SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE DestAirport = 'AHD'", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT t1.Airline FROM flights AS t1 JOIN airlines AS t2 ON t1.Airline  =  t2.uid GROUP BY t1.Airline HAVING COUNT(*) < 200", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo)  <  200", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'", "g_str": ["SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_ID IN (SELECT Template_ID FROM Documents)", "g_str": ["SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT Template_ID FROM Templates WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')", "g_str": ["SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'", "g_str": ["select other_details from paragraphs where paragraph_text like 'korea'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs WHERE Document_Name  =  'Welcome to NY'", "g_str": ["SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course = 'Math')", "g_str": ["SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "course_teach"], "hardness": "hard"}, {"p_str": "SELECT COUNT(*) FROM players WHERE player_id IN (SELECT winner_id FROM matches) AND hand = \"L\";", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT zip_postcode FROM Addresses WHERE line_1  =  \"Port Chelsea\"", "g_str": ["SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(T2.section_id)  <  2", "g_str": ["SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.degree_program_id  =  \"Bachelor\"", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Degree_Programs AS T2 ON T1.student_id = T2.degree_program_id WHERE T2.degree_summary_name  =  \"Bachelors\"", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT transcripts.transcript_date, transcript_contents.other_details FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1", "g_str": ["SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT section_name, section_description FROM Sections WHERE section_name =  'h'", "g_str": ["SELECT section_description FROM Sections WHERE section_name  =  'h'", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT course_description FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_name  =  \"h\")", "g_str": ["SELECT section_description FROM Sections WHERE section_name  =  'h'", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Cartoon WHERE Directed_by  =  \"Ben Jones\"", "g_str": ["SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T1.series_name  =  \"Sky Radio\"", "g_str": ["SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T3 ON T1.Channel  =  T3.id WHERE T3.series_name  =  \"Sky Radio\"", "g_str": ["SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT series_name FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "g_str": ["SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT Episode FROM TV_series WHERE series_name = \"Sky Radio\"", "g_str": ["SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'", "g_str": ["SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "tvshow"], "hardness": "medium"}, {"p_str": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'", "g_str": ["SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT t2.Continent FROM city AS t1 JOIN country AS t2 ON t1.CountryCode  =  t2.Code WHERE t1.Name  =  \"Anguilla\"", "g_str": ["SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\"", "g_str": ["SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT SUM(city.Population), country.Name, country.GNP FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'English' GROUP BY country.Name ORDER BY country.GNP DESC LIMIT 1;", "g_str": ["SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT count(*) FROM city WHERE District = \"Gelderland\";", "g_str": ["SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT avg(GNP) ,  sum(Population) FROM country WHERE HeadOfState  =  \"US Territory\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT AVG(T1.GNP) as mean_GNP, SUM(T1.Population) as total_population FROM country AS T1 WHERE T1.Continent = \"Asia\"", "g_str": ["SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT GovernmentForm FROM country WHERE Continent = \"Africa\"", "g_str": ["SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  \"Afghanistan\" AND T1.IsOfficial  =  \"T'", "g_str": ["SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT(country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\"", "g_str": ["SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') ORDER BY Percentage DESC LIMIT 1", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING count(T2.CountryCode)  =  1", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T3 ON T1.CountryCode  =  T3.Code WHERE T3.GovernmentForm  =  'Republic' AND T1.CountryCode NOT IN (SELECT T4.CountryCode FROM countrylanguage AS T5 JOIN country AS T4 ON T5.CountryCode  =  T4.Code WHERE T4.GovernmentForm  !=  'Republic')", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T3.Language  =  \"English\" ORDER BY T2.Population DESC LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT city.Name FROM city, countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1", "g_str": ["SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT name, population, life_expectancy FROM country WHERE continent = 'Asia' ORDER BY surface_area DESC LIMIT 1", "g_str": ["SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT sum(Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')", "g_str": ["SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Language FROM countrylanguage WHERE IsOfficial = \"T\" AND HeadOfState = \"Beatrix\"", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Language FROM countrylanguage WHERE IsOfficial = \"T\" AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\")", "g_str": ["SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "g_str": ["SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Name FROM country WHERE Population  >  (SELECT max(Population) FROM country WHERE Region  =  'Africa') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'Asian')", "g_str": ["SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language != 'English'", "g_str": ["SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "world_1"], "hardness": "easy"}, {"p_str": "SELECT Name FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = \"T\") AND CountryCode IN (SELECT Code FROM country WHERE Continent = \"Europe\")", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.Continent = \"Europe\" AND T3.Language != \"English\" AND T3.IsOfficial = \"F\"", "g_str": ["SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "world_1"], "hardness": "extra"}, {"p_str": "SELECT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND countrylanguage.CountryCode = country.Code AND country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'", "g_str": ["SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT GovernmentForm, SUM(Population) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72", "g_str": ["SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "world_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM countrylanguage WHERE Language  =  \"Spanish\" AND IsOfficial  =  \"T\"", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode FROM countrylanguage WHERE Language =  'Spanish' AND IsOfficial =  'T'", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = 'Kyle'", "g_str": ["SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "network_1"], "hardness": "hard"}, {"p_str": "SELECT min(T1.grade) FROM Highschooler AS T1 WHERE T1.ID NOT IN (SELECT T2.friend_id FROM Friend AS T2)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)", "g_str": ["SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "extra"}, {"p_str": "SELECT T2.first_name ,  T2.last_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.cost_of_treatment  <  (SELECT AVG(cost_of_treatment) FROM treatments);", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T2.first_name ,  T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.cost_of_treatment  <  (SELECT AVG(cost_of_treatment) FROM Treatments)", "g_str": ["SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  = (SELECT MIN(age) FROM Dogs)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y' );", "g_str": ["SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')", "g_str": ["SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT Name FROM singer WHERE Sales  >  300000", "g_str": ["SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "singer"], "hardness": "medium"}, {"p_str": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_id = 'AirCon'", "g_str": ["SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "real_estate_properties"], "hardness": "medium"}, {"p_str": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T1.property_type_code  =  'given_code'", "g_str": ["SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "real_estate_properties"], "hardness": "medium"}, {"p_str": "SELECT Major, Age FROM Student EXCEPT SELECT t1.Major, t1.Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  'Cat'", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' EXCEPT SELECT T1.Major, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType != 'Cat'", "g_str": ["SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT Fname, Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  'Dog' EXCEPT SELECT t1.Fname, t1.Age FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID  =  t2.StuID JOIN Pets AS t3 ON t2.PetID  =  t3.PetID WHERE t3.PetType  =  'Cat'", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  \"Dog\" EXCEPT SELECT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  \"Cat\"", "g_str": ["SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pets_1"], "hardness": "extra"}, {"p_str": "SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker  =  \"General Motors\") UNION SELECT Make FROM cars_data WHERE Weight  >  3500", "g_str": ["SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT(cars_data.Year) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT(cars_data.Year) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight > 3000", "g_str": ["select distinct year from cars_data where weight between 3000 and 4000;", "car_1"], "hardness": "easy"}, {"p_str": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN model_list AS T2 ON T1.CountryId = T1.Country WHERE T2.Maker = 'fiat'", "g_str": ["SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryId HAVING COUNT(Maker) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make = 'Fiat'", "g_str": ["select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "car_1"], "hardness": "extra"}, {"p_str": "SELECT AirportName FROM airports EXCEPT SELECT t1.DestAirport FROM flights AS t1 WHERE t1.DestAirport IS NOT NULL UNION SELECT t1.SourceAirport FROM flights AS t1 WHERE t1.SourceAirport IS NOT NULL", "g_str": ["SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "flight_2"], "hardness": "hard"}, {"p_str": "SELECT T2.District FROM shop AS T1 JOIN employee AS T2 ON T1.Shop_ID  =  T2.Shop_ID WHERE T1.Number_products  <  3000 INTERSECT SELECT T2.District FROM shop AS T1 JOIN employee AS T2 ON T1.Shop_ID  =  T2.Shop_ID WHERE T1.Number_products  >  10000", "g_str": ["SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "employee_hire_evaluation"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016", "g_str": ["SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT DISTINCT winner_id FROM matches INTERSECT SELECT player_id FROM players WHERE hand  =  \"L\"", "g_str": ["SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT last_name FROM students WHERE state = \"North Carolina\" EXCEPT SELECT t1.last_name FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id  =  t2.student_id WHERE t1.state  =  \"North Carolina\"", "g_str": ["SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T3.semester_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T4 ON T1.degree_program_id  =  T4.degree_program_id JOIN Semesters AS T3 ON T1.semester_id  =  T3.semester_id WHERE T4.degree_program_id  =  \"Master\" INTERSECT SELECT T3.semester_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T4 ON T1.degree_program_id  =  T4.degree_program_id JOIN Semesters AS T3 ON T1.semester_id  =  T3.semester_id WHERE T4.degree_program_id  =  \"Bachelor\"", "g_str": ["SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_program_id  =  \"Masters\" INTERSECT SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_program_id  =  \"Bachelors\"", "g_str": ["SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  \"Ben Jones\"", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT T1.Channel FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.Channel = T2.Channel WHERE T1.Directed_by = \"Ben Jones\")", "g_str": ["SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "tvshow"], "hardness": "hard"}, {"p_str": "SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Kelly Clauss'", "g_str": ["SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "voter_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\"", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\"", "g_str": ["SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "world_1"], "hardness": "easy"}, {"p_str": "SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' INTERSECT SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' AND countrylanguage.IsOfficial = 'T'", "g_str": ["SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "world_1"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' EXCEPT SELECT T1.CountryCode FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'", "g_str": ["SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.ID JOIN Likes AS T3 ON T1.friend_id  =  T3.liked_id WHERE T1.student_id  =  T3.student_id", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.student_id FROM (SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes) AS T1", "g_str": ["SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id", "g_str": ["SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "network_1"], "hardness": "hard"}, {"p_str": "SELECT state FROM Owners GROUP BY state HAVING COUNT(DISTINCT owner_id) > 1 INTERSECT SELECT state FROM Professionals GROUP BY state HAVING COUNT(DISTINCT professional_id) > 1", "g_str": ["SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'IN' INTERSECT SELECT professional_id, last_name, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY professional_id HAVING COUNT(treatment_id) > 2", "g_str": ["SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT name FROM Dogs WHERE abandoned_yn = 'N' EXCEPT SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id JOIN Charges AS T3 ON T2.treatment_type_code = T3.charge_id WHERE T3.charge_amount > 1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT name FROM Dogs EXCEPT SELECT T1.name FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id = T2.owner_id JOIN Charges AS T3 ON T2.cost_of_treatment = T3.charge_amount GROUP BY T1.owner_id HAVING sum(T3.charge_amount) > 1000", "g_str": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name FROM Professionals AS T1 WHERE T1.first_name NOT IN (SELECT T2.name FROM Dogs AS T2) EXCEPT SELECT T1.first_name FROM Owners AS T1 WHERE T1.first_name NOT IN (SELECT T2.name FROM Dogs AS T2)", "g_str": ["SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "dog_kennels"], "hardness": "hard"}, {"p_str": "SELECT email_address FROM professionals WHERE state  =  'Hawaii' INTERSECT SELECT email_address FROM professionals WHERE state  =  'Wisconsin'", "g_str": ["SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE property_type_name = \"House\" UNION SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE property_type_name = \"Apartment\" AND room_count > 1", "g_str": ["SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "real_estate_properties"], "hardness": "hard"}, {"p_str": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING COUNT(T2.Model) >= 2 INTERSECT SELECT Id, Maker FROM car_makers GROUP BY Maker HAVING COUNT(Maker) > 3", "g_str": ["select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING COUNT(*) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id GROUP BY T1.Maker HAVING COUNT(*) > 3", "g_str": ["SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T3.series_name, T3.Country FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T1.id  =  T3.Channel JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  \"Ben Jones\" INTERSECT SELECT T3.series_name, T3.Country FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T1.id  =  T3.Channel JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  \"Michael Chang\"", "g_str": ["SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "tvshow"], "hardness": "extra"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = \"English\"", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Code FROM country EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'", "g_str": ["SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "world_1"], "hardness": "hard"}, {"p_str": "SELECT Stadium_ID, COUNT(concert_ID) FROM concert GROUP BY Stadium_ID ORDER BY COUNT(concert_ID)", "g_str": ["SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT T2.Continent, COUNT(*) FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId GROUP BY T2.Continent", "g_str": ["SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Continent, COUNT(CountryId) FROM countries GROUP BY Continent ORDER BY COUNT(CountryId) DESC", "g_str": ["SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.FullName, T1.Id, COUNT(T2.Model) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName", "g_str": ["SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T2.Continent, COUNT(*) FROM countries AS T1 JOIN car_makers AS T3 ON T1.CountryId = T3.Country GROUP BY T2.Continent", "g_str": ["SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT countries.CountryName, COUNT(car_makers.Maker) AS num_makers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Country ORDER BY num_makers DESC LIMIT 1", "g_str": ["SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT T1.FullName, COUNT(T2.Model) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName", "g_str": ["select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Model, MAX(T2.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model ORDER BY MAX(T2.MPG) DESC LIMIT 1", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Model, COUNT(*) FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "car_1"], "hardness": "hard"}, {"p_str": "SELECT T1.Country, COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country HAVING COUNT(*) > 2", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2) AS result", "g_str": ["select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "car_1"], "hardness": "medium"}, {"p_str": "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4) GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1", "g_str": ["SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "car_1"], "hardness": "extra"}, {"p_str": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT T2.Abbreviation, T2.Country FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline ORDER BY COUNT(*) ASC LIMIT 1", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY COUNT(*) ASC LIMIT 1", "g_str": ["SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10", "g_str": ["SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "flight_2"], "hardness": "medium"}, {"p_str": "SELECT T1.Shop_ID, COUNT(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID", "g_str": ["SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "employee_hire_evaluation"], "hardness": "medium"}, {"p_str": "SELECT hiring.Shop_ID, shop.Name, COUNT(hiring.Employee_ID) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID, shop.Name", "g_str": ["SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "employee_hire_evaluation"], "hardness": "medium"}, {"p_str": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "cre_Doc_Template_Mgt"], "hardness": "hard"}, {"p_str": "SELECT Templates.Template_Type_Code, COUNT(Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code", "g_str": ["SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "cre_Doc_Template_Mgt"], "hardness": "medium"}, {"p_str": "SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID ORDER BY SUM(T2.Total_spent) DESC LIMIT 1", "g_str": ["SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "museum_visit"], "hardness": "extra"}, {"p_str": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(T1.birth_date)) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id", "g_str": ["SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10", "g_str": ["SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10", "g_str": ["SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1)", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name, T2.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT p.first_name, p.last_name, SUM(r.ranking_points) FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.last_name ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "wta_1"], "hardness": "hard"}, {"p_str": "SELECT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.player_id IN (SELECT T2.winner_id FROM matches AS T2 WHERE T2.minutes = (SELECT MAX(minutes) FROM matches)) OR T1.player_id IN (SELECT T3.loser_id FROM matches AS T3 WHERE T3.minutes = (SELECT MAX(minutes) FROM matches))", "g_str": ["SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT P.first_name, SUM(R.ranking_points) FROM players AS P JOIN rankings AS R ON P.player_id = R.player_id GROUP BY P.player_id, P.first_name", "g_str": ["SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)", "g_str": ["SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "battle_death"], "hardness": "hard"}, {"p_str": "SELECT T2.id, T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T1.caused_by_ship_id ORDER BY SUM(T1.injured) DESC LIMIT 1", "g_str": ["SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "battle_death"], "hardness": "extra"}, {"p_str": "SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2)", "g_str": ["SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1", "g_str": ["SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)", "g_str": ["SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "student_transcripts_tracking"], "hardness": "medium"}, {"p_str": "SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1", "g_str": ["SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT T2.course_id, COUNT(T3.transcript_id) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcript_Contents AS T3 ON T1.student_course_id = T3.student_course_id GROUP BY T2.course_id ORDER BY COUNT(T3.transcript_id) DESC LIMIT 1", "g_str": ["SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "student_transcripts_tracking"], "hardness": "hard"}, {"p_str": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2", "g_str": ["SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT T1.Name, COUNT(T2.Final_Table_Made) AS table_count FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Poker_Player_ID ORDER BY table_count ASC", "g_str": ["SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "poker_player"], "hardness": "medium"}, {"p_str": "SELECT Continent, COUNT(Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(Language) DESC LIMIT 1", "g_str": ["SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT country.GovernmentForm, SUM(country.Population) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "g_str": ["SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Name, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS T3 WHERE T1.Code = T3.CountryCode)", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = T1.Code)", "g_str": ["SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT COUNT(*) FROM (SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode HAVING max_percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))", "g_str": ["SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "extra"}, {"p_str": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'", "g_str": ["SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "world_1"], "hardness": "medium"}, {"p_str": "SELECT Major_Record_Format, COUNT(*) AS frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC", "g_str": ["SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "orchestra"], "hardness": "medium"}, {"p_str": "SELECT T2.name, COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T3 ON T1.ID = T3.student_id JOIN Highschooler AS T2 ON T2.ID = T3.friend_id GROUP BY T1.name", "g_str": ["SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name", "g_str": ["SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT T1.student_id, COUNT(T2.liked_id) FROM Highschooler AS T1 LEFT JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.student_id", "g_str": ["SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT H.name, COUNT(L.student_id) AS likes FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name", "g_str": ["SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT T1.name, COUNT(*) AS likes FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name", "g_str": ["SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "network_1"], "hardness": "medium"}, {"p_str": "SELECT O.owner_id, O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T2.owner_id, T2.last_name FROM Dogs AS T1 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(T1.cost_of_treatment) ASC LIMIT 1", "g_str": ["SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT owner_id, zip_code FROM Owners WHERE owner_id = (SELECT owner_id FROM Treatments GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)", "g_str": ["SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT T1.owner_id, T2.zip_code FROM Treatments AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(T1.cost_of_treatment) DESC LIMIT 1", "g_str": ["SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)", "g_str": ["SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)", "g_str": ["SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1", "g_str": ["SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT MAX(Capacity) as Max_Capacity, AVG(Capacity) as Average_Capacity FROM stadium", "g_str": ["select max(capacity), average from stadium", "concert_singer"], "hardness": "medium"}, {"p_str": "SELECT weight FROM Pets WHERE PetType = 'Dog' ORDER BY pet_age ASC LIMIT 1", "g_str": ["SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pets_1"], "hardness": "medium"}, {"p_str": "SELECT car_makers.FullName, COUNT(car_names.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName", "g_str": ["SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker", "g_str": ["SELECT Maker ,  Model FROM MODEL_LIST;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT AVG(Weight) FROM cars_data", "g_str": ["SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "car_1"], "hardness": "medium"}, {"p_str": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) ASC LIMIT 1", "g_str": ["SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "flight_2"], "hardness": "extra"}, {"p_str": "SELECT COUNT(*) FROM employee WHERE Is_full_time = 'Yes' AND City = 'New York'", "g_str": ["SELECT count(*) FROM employee", "employee_hire_evaluation"], "hardness": "easy"}, {"p_str": "SELECT MAX(loser_rank) FROM matches", "g_str": ["SELECT min(loser_rank) FROM matches", "wta_1"], "hardness": "easy"}, {"p_str": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date", "g_str": ["SELECT first_name ,  last_name FROM players ORDER BY birth_date", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name", "g_str": ["SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name", "g_str": ["SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT first_name, SUM(ranking_points) as total_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name", "g_str": ["SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "wta_1"], "hardness": "medium"}, {"p_str": "SELECT name, date, result FROM battle", "g_str": ["SELECT name ,  date FROM battle", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT MAX(killed + injured) as max_death_toll, MIN(killed + injured) as min_death_toll FROM death GROUP BY caused_by_ship_id", "g_str": ["SELECT max(killed) ,  min(killed) FROM death", "battle_death"], "hardness": "medium"}, {"p_str": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "g_str": ["SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id", "g_str": ["SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcripts.transcript_id = Transcript_Contents.transcript_id) ASC LIMIT 1", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id NOT IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) > 1)", "g_str": ["SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "student_transcripts_tracking"], "hardness": "extra"}, {"p_str": "SELECT DISTINCT line_1, line_2, line_3, city, state_province_county, country FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id", "g_str": ["SELECT count(DISTINCT current_address_id) FROM Students", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC", "g_str": ["SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "student_transcripts_tracking"], "hardness": "easy"}, {"p_str": "SELECT Episode FROM TV_series ORDER BY Rating DESC", "g_str": ["SELECT Episode FROM TV_series ORDER BY rating", "tvshow"], "hardness": "easy"}, {"p_str": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE", "g_str": ["SELECT count(*) FROM area_code_state", "voter_1"], "hardness": "easy"}, {"p_str": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY sum(countrylanguage.Percentage) DESC LIMIT 1", "g_str": ["SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "world_1"], "hardness": "extra"}, {"p_str": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Asian' ORDER BY country.SurfaceArea DESC LIMIT 1", "g_str": ["SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "world_1"], "hardness": "hard"}, {"p_str": "SELECT name, grade FROM Highschooler", "g_str": ["SELECT grade FROM Highschooler", "network_1"], "hardness": "easy"}, {"p_str": "SELECT AVG(H1.grade) FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.ID = F1.student_id JOIN Highschooler AS H2 ON H2.ID = F1.friend_id", "g_str": ["SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "network_1"], "hardness": "hard"}, {"p_str": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Charges AS T3 ON T2.cost_of_treatment = T3.charge_amount ORDER BY T3.charge_amount ASC LIMIT 1", "g_str": ["SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "g_str": ["SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name NOT IN (SELECT breed_name FROM Dogs GROUP BY breed_name ORDER BY COUNT(*) ASC LIMIT 1)", "g_str": ["SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY age ASC LIMIT 1)", "g_str": ["SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "dog_kennels"], "hardness": "extra"}, {"p_str": "SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "g_str": ["SELECT count(DISTINCT dog_id) FROM Treatments", "dog_kennels"], "hardness": "easy"}, {"p_str": "SELECT MAX(cost_of_treatment) FROM Treatments", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT MAX(cost_of_treatment) FROM Treatments", "g_str": ["SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code", "g_str": ["SELECT DISTINCT breed_code ,  size_code FROM dogs", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT P.first_name, TT.treatment_type_description FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}, {"p_str": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "g_str": ["SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "dog_kennels"], "hardness": "medium"}]